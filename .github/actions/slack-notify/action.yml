name: 'LittlePipes Slack Notify'
description: 'Send rich Slack notifications for LittlePipes build results'
inputs:
  webhook_url:
    description: 'Slack webhook URL'
    required: true
  status:
    description: 'Overall build status (success/failure)'
    required: true
  duration:
    description: 'Build duration in seconds'
    required: true
  duration_formatted:
    description: 'Formatted duration (MM:SS)'
    required: true
  platform:
    description: 'Platform built (ios/android/both)'
    required: true
  dev_mode:
    description: 'Whether dev mode was enabled'
    required: false
    default: 'false'
  target_repo:
    description: 'Target repository name'
    required: true
  trigger_actor:
    description: 'User who triggered the build'
    required: true
  # Test results
  unit_tests_result:
    description: 'Unit tests result'
    required: false
    default: 'skipped'
  ios_ui_tests_result:
    description: 'iOS UI tests result'
    required: false
    default: 'skipped'
  android_ui_tests_result:
    description: 'Android UI tests result'
    required: false
    default: 'skipped'
  # Build results
  ios_build_result:
    description: 'iOS build result'
    required: false
    default: 'skipped'
  android_build_result:
    description: 'Android build result'
    required: false
    default: 'skipped'
  google_play_query_result:
    description: 'Google Play query result'
    required: false
    default: 'skipped'
  google_play_build_number:
    description: 'Latest build number from Google Play'
    required: false
    default: '0'

runs:
  using: 'composite'
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        echo "üîî Slack Notify Action Starting"
        echo "Webhook URL: ${{ inputs.webhook_url != '' && 'PRESENT' || 'MISSING' }}"
        echo "Status: ${{ inputs.status }}"
        echo "Duration: ${{ inputs.duration }}s (${{ inputs.duration_formatted }})"
        echo "Platform: ${{ inputs.platform }}"
        echo "Target: ${{ inputs.target_repo }}"
        echo "Actor: ${{ inputs.trigger_actor }}"
        echo "Dev Mode: ${{ inputs.dev_mode }}"

    - name: Prepare Slack Message
      shell: bash
      run: |
        # Set status emoji and color
        if [[ "${{ inputs.status }}" == "success" ]]; then
          STATUS_EMOJI="‚úÖ"
          STATUS_COLOR="good"
          STATUS_TEXT="SUCCESS"
        else
          STATUS_EMOJI="‚ùå"
          STATUS_COLOR="danger"  
          STATUS_TEXT="FAILURE"
        fi
        
        # Platform emoji
        case "${{ inputs.platform }}" in
          "ios") PLATFORM_EMOJI="üçé" ;;
          "android") PLATFORM_EMOJI="ü§ñ" ;;
          "both") PLATFORM_EMOJI="üçéü§ñ" ;;
          *) PLATFORM_EMOJI="üì±" ;;
        esac
        
        # Dev mode indicator
        DEV_MODE_TEXT=""
        if [[ "${{ inputs.dev_mode }}" == "true" ]]; then
          DEV_MODE_TEXT=" üîß DEV MODE"
        fi
        
        # Create test results summary
        TEST_SUMMARY=""
        if [[ "${{ inputs.dev_mode }}" == "true" ]]; then
          TEST_SUMMARY="Tests skipped in dev mode"
        else
          TESTS=()
          if [[ "${{ inputs.unit_tests_result }}" != "skipped" ]]; then
            if [[ "${{ inputs.unit_tests_result }}" == "success" ]]; then
              TESTS+=("Unit ‚úÖ")
            else
              TESTS+=("Unit ‚ùå")
            fi
          fi
          if [[ "${{ inputs.ios_ui_tests_result }}" != "skipped" ]]; then
            if [[ "${{ inputs.ios_ui_tests_result }}" == "success" ]]; then
              TESTS+=("iOS UI ‚úÖ")
            else
              TESTS+=("iOS UI ‚ùå")
            fi
          fi
          if [[ "${{ inputs.android_ui_tests_result }}" != "skipped" ]]; then
            if [[ "${{ inputs.android_ui_tests_result }}" == "success" ]]; then
              TESTS+=("Android UI ‚úÖ")
            else
              TESTS+=("Android UI ‚ùå")
            fi
          fi
        
          if [ ${#TESTS[@]} -eq 0 ]; then
            TEST_SUMMARY="No tests ran"
          else
            TEST_SUMMARY=$(IFS=", "; echo "${TESTS[*]}")
          fi
        fi
        
        # Create build results summary
        BUILD_SUMMARY=""
        BUILDS=()
        if [[ "${{ inputs.ios_build_result }}" != "skipped" ]]; then
          if [[ "${{ inputs.ios_build_result }}" == "success" ]]; then
            BUILDS+=("iOS ‚úÖ")
          else
            BUILDS+=("iOS ‚ùå")
          fi
        fi
        if [[ "${{ inputs.android_build_result }}" != "skipped" ]]; then
          if [[ "${{ inputs.android_build_result }}" == "success" ]]; then
            BUILDS+=("Android ‚úÖ")
          else
            BUILDS+=("Android ‚ùå")
          fi
        fi
        
        if [ ${#BUILDS[@]} -eq 0 ]; then
          BUILD_SUMMARY="No builds ran"
        else
          BUILD_SUMMARY=$(IFS=", "; echo "${BUILDS[*]}")
        fi
        
        # Google Play info
        GOOGLE_PLAY_INFO=""
        if [[ "${{ inputs.google_play_query_result }}" == "success" ]] && [[ "${{ inputs.google_play_build_number }}" != "0" ]]; then
          GOOGLE_PLAY_INFO=" | Build #${{ inputs.google_play_build_number }}"
        fi
        
        # Save all variables to environment for next step
        echo "STATUS_EMOJI=$STATUS_EMOJI" >> $GITHUB_ENV
        echo "STATUS_COLOR=$STATUS_COLOR" >> $GITHUB_ENV
        echo "STATUS_TEXT=$STATUS_TEXT" >> $GITHUB_ENV
        echo "PLATFORM_EMOJI=$PLATFORM_EMOJI" >> $GITHUB_ENV
        echo "DEV_MODE_TEXT=$DEV_MODE_TEXT" >> $GITHUB_ENV
        echo "TEST_SUMMARY=$TEST_SUMMARY" >> $GITHUB_ENV
        echo "BUILD_SUMMARY=$BUILD_SUMMARY" >> $GITHUB_ENV
        echo "GOOGLE_PLAY_INFO=$GOOGLE_PLAY_INFO" >> $GITHUB_ENV

    - name: Send Slack Notification
      shell: bash
      run: |
        if [[ -z "${{ inputs.webhook_url }}" ]]; then
          echo "‚ö†Ô∏è SLACK_WEBHOOK_URL not set, skipping Slack notification"
          exit 0
        fi
        
        # Create the Slack payload
        PAYLOAD=$(cat <<EOF
        {
          "attachments": [
            {
              "color": "$STATUS_COLOR",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "$STATUS_EMOJI LittlePipes Build $STATUS_TEXT$DEV_MODE_TEXT"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ inputs.target_repo }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "*Platform:*\n$PLATFORM_EMOJI ${{ inputs.platform }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Duration:*\n‚è±Ô∏è ${{ inputs.duration_formatted }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\nüë§ ${{ inputs.trigger_actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Tests:* $TEST_SUMMARY\n*Builds:* $BUILD_SUMMARY$GOOGLE_PLAY_INFO"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "üîê *SHA-1:* $ANDROID_RELEASE_SHA1"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "üöÄ <https://github.com/${{ github.repository }}/actions|View Workflow> | <https://github.com/${{ inputs.target_repo }}|Repository>"
                    }
                  ]
                }
              ]
            }
          ]
        }
        EOF
        )
        
        # Send to Slack
        echo "üì§ Sending Slack notification..."
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-type: application/json" \
          --data "$PAYLOAD" \
          "${{ inputs.webhook_url }}")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
        
        if [[ "$HTTP_CODE" -eq 200 ]]; then
          echo "‚úÖ Slack notification sent successfully"
        else
          echo "‚ùå Slack notification failed with HTTP $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi