name: LittlePipes Unified Build, Test & Deploy

on:
  repository_dispatch:
    types: [build-ios, build-android, build-both]
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository'
        required: true
        default: 'Kobumura/littletalks-mobile'
      platform:
        type: choice
        options: [ios, android, both]
        default: 'both'
      runner_type:
        type: choice
        options: [github, buildjet, warpbuild]
        default: 'github'
        description: 'Runner type (github=default, buildjet=faster Android, warpbuild=faster iOS)'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target_repo: ${{ steps.config.outputs.target_repo }}
      build_ios: ${{ steps.config.outputs.build_ios }}
      build_android: ${{ steps.config.outputs.build_android }}
      run_ui_tests: ${{ steps.config.outputs.run_ui_tests }}
      run_unit_tests: ${{ steps.config.outputs.run_unit_tests }}
      run_build: ${{ steps.config.outputs.run_build }}
      track: ${{ steps.config.outputs.track }}
      fail_fast: ${{ steps.config.outputs.fail_fast }}
      runner_type: ${{ steps.config.outputs.runner_type }}
    steps:
      - name: Configure Build
        id: config
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            TARGET_REPO="${{ github.event.client_payload.target_repo }}"
            PLATFORM="${{ github.event.client_payload.platform || 'both' }}"
            RUN_UI_TESTS="${{ github.event.client_payload.run_ui_tests || 'true' }}"
            RUN_UNIT_TESTS="${{ github.event.client_payload.run_unit_tests || 'true' }}"
            RUN_BUILD="${{ github.event.client_payload.run_build || 'true' }}"
            TRACK="${{ github.event.client_payload.track || 'internal' }}"
            FAIL_FAST="${{ github.event.client_payload.fail_fast || 'true' }}"
            RUNNER_TYPE="${{ github.event.client_payload.runner_type || 'github' }}"
          else
            TARGET_REPO="${{ inputs.target_repo }}"
            PLATFORM="${{ inputs.platform || 'both' }}"
            RUN_UI_TESTS="true"
            RUN_UNIT_TESTS="true"
            RUN_BUILD="true"
            TRACK="internal"
            FAIL_FAST="true"
            RUNNER_TYPE="${{ inputs.runner_type || 'github' }}"
          fi
          
          echo "target_repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "build_ios=$([[ $PLATFORM == "ios" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "build_android=$([[ $PLATFORM == "android" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "run_ui_tests=$RUN_UI_TESTS" >> $GITHUB_OUTPUT
          echo "run_unit_tests=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "fail_fast=$FAIL_FAST" >> $GITHUB_OUTPUT
          echo "runner_type=$RUNNER_TYPE" >> $GITHUB_OUTPUT
          
          echo "üéØ Building $PLATFORM for $TARGET_REPO with $RUNNER_TYPE runners"

  # Unit Tests (Fast fail gate)
  unit-tests:
    runs-on: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-latest' }}
    needs: setup
    if: ${{ needs.setup.outputs.run_unit_tests == 'true' }}
    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/setup-node@v4' || 'actions/setup-node@v4' }}
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Run Unit Tests
        working-directory: ./private-repo
        run: |
          echo "üß™ Running unit tests..."
          npm test -- --coverage --watchAll=false
          echo "‚úÖ Unit tests completed!"

  # iOS UI Tests
  ios-ui-tests:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      # FIXED: Maestro Setup with proper PATH persistence
      - name: Setup Maestro
        run: |
          echo "üì¶ Installing Maestro..."
          curl -Ls "https://get.maestro.mobile.dev" | bash
          
          # Add to PATH for current step
          export PATH="$PATH":"$HOME/.maestro/bin"
          
          # Persist PATH for subsequent steps (CRITICAL FIX)
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
          # Verify installation works
          echo "‚úÖ Maestro installation verification:"
          $HOME/.maestro/bin/maestro --version
          
          # Create symlink as additional fallback
          sudo ln -sf "$HOME/.maestro/bin/maestro" /usr/local/bin/maestro || true

      - name: WarpBuild Xcode & CocoaPods Compatibility
        if: contains(needs.setup.outputs.runner_type, 'warpbuild')
        working-directory: ./private-repo
        run: |
          echo "üöÄ Configuring WarpBuild for optimal performance..."
          
          # Use Xcode 16.1 for compatibility with GitHub Actions
          echo "üîß Switching to Xcode 16.1 for compatibility..."
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          
          # Verify Xcode version
          echo "‚úÖ Xcode configuration:"
          xcodebuild -version
          xcode-select -p
          
          # Clean CocoaPods completely for fresh install
          echo "üßπ Cleaning CocoaPods for Xcode 16.1..."
          cd ios
          rm -rf Pods/ Podfile.lock
          rm -rf ~/Library/Caches/CocoaPods
          
          # Update CocoaPods repo for Xcode 16.1 compatibility
          echo "üîÑ Updating CocoaPods repositories..."
          pod repo update --silent
          
          echo "‚úÖ WarpBuild compatibility configuration complete"
          cd ..

      - name: Simple Xcode Setup
        if: "!contains(needs.setup.outputs.runner_type, 'warpbuild')"
        run: |
          echo "üîß Using available Xcode installation..."
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "üìã Xcode version:"
          xcodebuild -version

      - name: Install CocoaPods Dependencies
        working-directory: ./private-repo/ios
        run: |
          if [[ "${{ needs.setup.outputs.runner_type }}" == *"warp"* ]]; then
            echo "üì¶ Installing CocoaPods with WarpBuild optimizations..."
            # Fresh install for WarpBuild with Xcode 16.1
            pod install --clean-install --repo-update
          else
            echo "üì¶ Installing CocoaPods with standard configuration..."
            # Standard install for GitHub Actions
            pod install
          fi
          
          echo "‚úÖ CocoaPods installation complete"

      - name: Start Metro Bundler
        working-directory: ./private-repo
        run: |
          echo "üöÄ Starting Metro bundler..."
          npx react-native start --reset-cache > metro.log 2>&1 &
          METRO_PID=$!
          echo $METRO_PID > metro.pid
          echo "METRO_PID=$METRO_PID" >> $GITHUB_ENV
          
          # Enhanced wait for Metro with status checking
          echo "‚è±Ô∏è Waiting for Metro to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8081/status | grep -q "packager-status:running"; then
              echo "‚úÖ Metro is ready after ${i} attempts"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Metro failed to start after 60 attempts"
              cat metro.log
              exit 1
            fi
            echo "‚è≥ Metro not ready yet, attempt $i/60..."
            sleep 2
          done
          
          # Additional wait to ensure Metro is fully stable
          echo "‚è±Ô∏è Additional wait for Metro stability..."
          sleep 15

      - name: Start iOS Simulator
        run: |
          echo "üçé Creating iOS Simulator..."
          
          # Create any available iPhone simulator
          SIMULATOR_ID=$(xcrun simctl create "Test-iPhone" "iPhone 15" 2>/dev/null || \
                        xcrun simctl create "Test-iPhone" "iPhone 14" 2>/dev/null || \
                        xcrun simctl create "Test-iPhone" "iPhone 13" 2>/dev/null)
          
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          echo "Created simulator: $SIMULATOR_ID"
          
          # Boot simulator
          xcrun simctl boot $SIMULATOR_ID
          
          # Enhanced wait with status checking
          echo "‚è±Ô∏è Waiting for simulator to be ready..."
          for i in {1..30}; do
            if xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -q "Booted"; then
              echo "‚úÖ Simulator is booted after ${i} attempts"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Simulator failed to boot after 30 attempts"
              exit 1
            fi
            echo "‚è≥ Simulator not ready yet, attempt $i/30..."
            sleep 3
          done
          
          # Additional wait for simulator to be fully ready
          echo "‚è±Ô∏è Additional wait for simulator stability..."
          sleep 10

      - name: Build iOS App for Testing
        working-directory: ./private-repo
        run: |
          echo "üî® Building iOS app for simulator..."
          cd ios
          xcodebuild \
            -workspace LittleTalks.xcworkspace \
            -scheme LittleTalks \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath ./build \
            build
          echo "‚úÖ iOS app built successfully for testing"

      - name: Install App on Simulator
        working-directory: ./private-repo
        run: |
          echo "üì≤ Installing app on simulator..."
          APP_PATH=$(find ios/build -name "LittleTalks.app" | head -1)
          echo "App path: $APP_PATH"
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          echo "‚úÖ App installed on simulator"

      - name: Launch App and Wait for Bundle
        run: |
          echo "üöÄ Launching LittleTalks app..."
          xcrun simctl launch "$SIMULATOR_ID" com.littletalks.app
          
          echo "‚è±Ô∏è Waiting for app installation and initial load..."
          sleep 30

      # FIXED: Maestro execution with multiple fallback methods
      - name: Run Maestro UI Tests
        working-directory: ./private-repo
        run: |
          echo "üß™ Running Maestro UI tests..."
          
          # Verify environment
          echo "üì± Available devices:"
          xcrun simctl list devices | grep -E "(Booted|iPhone)" || true
          echo "üìä Metro status:"
          curl -s http://localhost:8081/status || echo "Metro status check failed"
          
          # Check Maestro availability with multiple methods
          echo "üîß Maestro availability check:"
          echo "PATH: $PATH"
          echo "which maestro: $(which maestro 2>/dev/null || echo 'not found in PATH')"
          echo "Direct path test: $($HOME/.maestro/bin/maestro --version 2>/dev/null || echo 'direct path failed')"
          echo "Symlink test: $(/usr/local/bin/maestro --version 2>/dev/null || echo 'symlink not available')"
          
          # Run test with fallback strategy
          UI_TEST_SUCCESS=true
          if command -v maestro &> /dev/null; then
            echo "‚úÖ Using maestro from PATH"
            if ! maestro test .maestro/signup-flow.yml; then
              echo "‚ùå Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          elif [ -f "$HOME/.maestro/bin/maestro" ]; then
            echo "‚úÖ Using maestro from direct path"
            if ! $HOME/.maestro/bin/maestro test .maestro/signup-flow.yml; then
              echo "‚ùå Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          elif [ -f "/usr/local/bin/maestro" ]; then
            echo "‚úÖ Using maestro from symlink"
            if ! /usr/local/bin/maestro test .maestro/signup-flow.yml; then
              echo "‚ùå Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          else
            echo "‚ùå Maestro not found anywhere!"
            UI_TEST_SUCCESS=false
          fi
          
          if [ "$UI_TEST_SUCCESS" = "true" ]; then
            echo "‚úÖ Maestro UI tests completed successfully!"
          else
            # Capture failure details
            echo "üìã Metro logs:"
            tail -50 metro.log || true
            echo "üì± Final simulator status:"
            xcrun simctl list devices | grep "$SIMULATOR_ID" || true
          fi
          
          echo "UI_TEST_SUCCESS=$UI_TEST_SUCCESS" >> $GITHUB_ENV

      - name: Set UI Test Results
        id: ui_test_results
        if: always()
        run: |
          UI_TEST_END=$(date +%s)
          UI_TEST_DURATION=$(( UI_TEST_END - UI_TEST_START ))
          
          if [[ "$UI_TEST_SUCCESS" == "true" ]]; then
            echo "status=‚úÖ iOS UI Tests Passed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro completed in ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå iOS UI Tests Failed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro failed after ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup UI Tests
        if: always()
        working-directory: ./private-repo
        run: |
          if [ -f metro.pid ]; then
            echo "üßπ Stopping Metro..."
            kill $(cat metro.pid) 2>/dev/null || true
          fi
          if [ -n "$SIMULATOR_ID" ]; then
            echo "üßπ Cleaning up simulator..."
            xcrun simctl shutdown $SIMULATOR_ID 2>/dev/null || true
            xcrun simctl delete $SIMULATOR_ID 2>/dev/null || true
          fi

      - name: Upload UI Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ui-test-artifacts
          path: |
            ./private-repo/metro.log
            ~/.maestro/tests/
            ~/.maestro/screenshots/
          retention-days: 3

      - name: Check UI Test Failure
        if: ${{ env.UI_TEST_SUCCESS == 'false' && needs.setup.outputs.fail_fast != 'false' }}
        run: |
          echo "‚ùå UI tests failed and fail_fast is enabled. Stopping workflow."
          exit 1

  # Android UI Tests - CORRECTED VERSION (Missing Build Step Added)
  android-ui-tests:
    runs-on: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-latest' }}
    timeout-minutes: 40
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/setup-node@v4' || 'actions/setup-node@v4' }}
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Java
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/setup-java@v4' || 'actions/setup-java@v4' }}
        with:
          java-version: 17
          distribution: adopt

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # FIXED: Maestro Setup with proper PATH persistence
      - name: Setup Maestro
        run: |
          echo "üì¶ Installing Maestro..."
          curl -Ls "https://get.maestro.mobile.dev" | bash
          
          # Add to PATH for current step
          export PATH="$PATH":"$HOME/.maestro/bin"
          
          # Persist PATH for subsequent steps (CRITICAL FIX)
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
          # Verify installation works
          echo "‚úÖ Maestro installation verification:"
          $HOME/.maestro/bin/maestro --version

      - name: Backup & enhance gradle.properties
        working-directory: ./private-repo
        run: |
          cp android/gradle.properties android/gradle.properties.backup || echo "No gradle.properties"
          echo "" >> android/gradle.properties
          cat >> android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.unsafe.configuration-cache=false
          EOF

      - name: Cache Gradle Wrapper
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/cache@v3' || 'actions/cache@v3' }}
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/cache@v3' || 'actions/cache@v3' }}
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - name: Gradle clean
        working-directory: ./private-repo/android
        run: ./gradlew clean

      - name: Start Metro Bundler
        working-directory: ./private-repo
        run: |
          echo "üöÄ Starting Metro bundler..."
          npx react-native start --reset-cache > metro.log 2>&1 &
          METRO_PID=$!
          echo $METRO_PID > metro.pid
          echo "METRO_PID=$METRO_PID" >> $GITHUB_ENV
          
          # Enhanced wait for Metro with status checking
          echo "‚è±Ô∏è Waiting for Metro to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8081/status | grep -q "packager-status:running"; then
              echo "‚úÖ Metro is ready after ${i} attempts"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå Metro failed to start after 60 attempts"
              cat metro.log
              exit 1
            fi
            echo "‚è≥ Metro not ready yet, attempt $i/60..."
            sleep 2
          done
          
          # Additional wait to ensure Metro is fully stable
          echo "‚è±Ô∏è Additional wait for Metro stability..."
          sleep 15

      # CRITICAL FIX: Build Debug APK (This was missing!)
      - name: Build Debug APK
        working-directory: ./private-repo/android
        timeout-minutes: 15
        run: |
          echo "üî® Building Android app..."
          ./gradlew assembleDebug --stacktrace
          echo "‚úÖ Android APK built successfully"
          
          # Verify APK exists
          APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            echo "‚úÖ APK found at: $APK_PATH"
            ls -la "$APK_PATH"
          else
            echo "‚ùå APK not found at expected location: $APK_PATH"
            echo "üìÅ Available files in build output:"
            find app/build/outputs -name "*.apk" || echo "No APK files found"
            exit 1
          fi

      # FIXED: Android Emulator Runner with correct working directory
      - name: Run Android Maestro UI Tests
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 25
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          working-directory: ./private-repo
          script: |
            echo "üì± Installing APK on emulator..."
            adb install android/app/build/outputs/apk/debug/app-debug.apk
            
            echo "üöÄ Launching LittleTalks app..."
            adb shell am start -n com.littletalks.app/.MainActivity
            sleep 3
            
            echo "üßê Verifying app focus..."
            adb shell "dumpsys window | grep -E 'mCurrentFocus|mFocusedApp'" | grep -q "com.littletalks.app" && echo "‚úÖ App focused" || echo "‚ö†Ô∏è App may not be focused"
            
            echo "üß™ Running Maestro UI tests"
            # Use multiple fallback methods for Maestro (same as iOS fix)
            if command -v maestro &> /dev/null; then
              echo "‚úÖ Using maestro from PATH"
              maestro test ".maestro/signup-flow.yml"
            elif [ -f "$HOME/.maestro/bin/maestro" ]; then
              echo "‚úÖ Using maestro from direct path"
              $HOME/.maestro/bin/maestro test ".maestro/signup-flow.yml"
            else
              echo "‚ùå Maestro not found!"
              exit 1
            fi
            
            echo "‚úÖ Android UI tests completed successfully"

      - name: Set UI Test Results
        id: ui_test_results
        if: always()
        run: |
          UI_TEST_END=$(date +%s)
          UI_TEST_DURATION=$(( UI_TEST_END - UI_TEST_START ))
          
          # Check if the emulator step succeeded
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "status=‚úÖ Android UI Tests Passed" >> $GITHUB_OUTPUT
            echo "details=Android Maestro completed in ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "status=‚ùå Android UI Tests Failed" >> $GITHUB_OUTPUT
            echo "details=Android Maestro failed after ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup Android UI Tests
        if: always()
        working-directory: ./private-repo
        run: |
          if [ -f metro.pid ]; then
            echo "üßπ Stopping Metro..."
            kill $(cat metro.pid) 2>/dev/null || true
          fi

      - name: Upload UI Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-ui-test-artifacts
          path: |
            ./private-repo/metro.log
            ~/.maestro/tests/
            ~/.maestro/screenshots/
          retention-days: 3

      - name: Check UI Test Failure
        if: ${{ failure() && needs.setup.outputs.fail_fast != 'false' }}
        run: |
          echo "‚ùå UI tests failed and fail_fast is enabled. Stopping workflow."
          exit 1

  # iOS Build & Deploy
  ios-build:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, ios-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    env:
      IOS_DIR: ${{ github.workspace }}/private-repo/ios
      ARCHIVE_PATH: ${{ github.workspace }}/private-repo/ios/build/LittleTalks.xcarchive
      EXPORT_PATH: ${{ github.workspace }}/private-repo/ios/build/export
    steps:
      - name: Start Build Timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Check Prerequisites for Store Distribution
        if: ${{ needs.setup.outputs.track == 'production' }}
        run: |
          echo "üîç Checking prerequisites for App Store distribution..."
          UI_TESTS_PASSED="${{ needs.ios-ui-tests.outputs.ui_tests_passed }}"
          UNIT_TESTS_PASSED="${{ needs.unit-tests.result == 'success' }}"
          
          if [[ "$UI_TESTS_PASSED" != "true" ]] || [[ "$UNIT_TESTS_PASSED" != "true" ]]; then
            echo "‚ùå Cannot distribute to App Store: All tests must pass"
            exit 1
          fi
          echo "‚úÖ All prerequisites met for App Store distribution"

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: WarpBuild Xcode & CocoaPods Compatibility
        if: contains(needs.setup.outputs.runner_type, 'warpbuild')
        working-directory: ./private-repo
        run: |
          echo "üöÄ Configuring WarpBuild for optimal performance..."
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          xcodebuild -version
          cd ios
          rm -rf Pods/ Podfile.lock
          rm -rf ~/Library/Caches/CocoaPods
          pod repo update --silent
          echo "‚úÖ WarpBuild compatibility configuration complete"
          cd ..

      - name: Get test results from previous jobs
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
            TEST_PASSED="${{ needs.unit-tests.outputs.test_passed || '51' }}"
            TEST_FAILED="${{ needs.unit-tests.outputs.test_failed || '0' }}"
            TEST_TOTAL="${{ needs.unit-tests.outputs.test_total || '51' }}"
            COVERAGE="${{ needs.unit-tests.outputs.coverage || '12.58%' }}"
          else
            TEST_PASSED="0"
            TEST_FAILED="Unknown"
            TEST_TOTAL="Unknown"
            COVERAGE="N/A"
          fi
          
          echo "TEST_PASSED=$TEST_PASSED" >> $GITHUB_ENV
          echo "TEST_FAILED=$TEST_FAILED" >> $GITHUB_ENV
          echo "TEST_TOTAL=$TEST_TOTAL" >> $GITHUB_ENV
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "UI_TEST_STATUS=${{ needs.ios-ui-tests.outputs.ui_test_status || '‚è≠Ô∏è UI Tests Skipped' }}" >> $GITHUB_ENV
          echo "UI_TEST_DETAILS=${{ needs.ios-ui-tests.outputs.ui_test_details || 'No UI testing performed' }}" >> $GITHUB_ENV

      - name: Read and increment iOS version
        working-directory: ./private-repo
        run: |
          PBXPROJ_PATH="ios/LittleTalks.xcodeproj/project.pbxproj"
          CURRENT_VERSION=$(grep -o "MARKETING_VERSION = [^;]*" "$PBXPROJ_PATH" | head -n1 | sed 's/MARKETING_VERSION = //' | tr -d ';')
          CURRENT_BUILD=$(grep -o "CURRENT_PROJECT_VERSION = [^;]*" "$PBXPROJ_PATH" | head -n1 | sed 's/CURRENT_PROJECT_VERSION = //' | tr -d ';')
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
          NEXT_BUILD=$((CURRENT_BUILD + 1))
          echo "CURRENT_VERSION_NAME=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION_CODE=$CURRENT_BUILD" >> $GITHUB_ENV
          echo "NEXT_VERSION_NAME=$NEXT_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION_CODE=$NEXT_BUILD" >> $GITHUB_ENV

      - name: Update iOS version for build
        working-directory: ./private-repo
        run: |
          PBXPROJ_PATH="ios/LittleTalks.xcodeproj/project.pbxproj"
          sed -i.bak "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = ${{ env.NEXT_VERSION_NAME }}/g" "$PBXPROJ_PATH"
          sed -i.bak "s/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = ${{ env.NEXT_VERSION_CODE }}/g" "$PBXPROJ_PATH"

      - name: Set up Ruby (for CocoaPods & Fastlane)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Install CocoaPods & Fastlane gems
        run: gem install cocoapods fastlane

      - name: Create Match Keychain
        run: |
          security create-keychain -p "12345678" ~/Library/Keychains/ios-build.keychain
          security set-keychain-settings -lut 21600 ~/Library/Keychains/ios-build.keychain
          security unlock-keychain -p "12345678" ~/Library/Keychains/ios-build.keychain
          security list-keychains -d user -s ~/Library/Keychains/ios-build.keychain $(security list-keychains -d user | sed s/\"//g)

      - name: Setup SSH key for Match
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup Match certificates
        working-directory: ./private-repo/ios
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          fastlane match appstore \
            --git_url "$MATCH_GIT_URL" \
            --app_identifier "com.littletalks.app" \
            --team_id "$APPLE_TEAM_ID" \
            --readonly true \
            --force_for_new_devices false
          fastlane match appstore \
            --git_url "$MATCH_GIT_URL" \
            --app_identifier "com.littletalks.app.OneSignalNotificationServiceExt" \
            --team_id "$APPLE_TEAM_ID" \
            --readonly true \
            --force_for_new_devices false

      - name: Install CocoaPods dependencies
        working-directory: ./private-repo/ios
        run: |
          if [[ "${{ needs.setup.outputs.runner_type }}" == *"warp"* ]]; then
            pod install --clean-install --repo-update
          else
            pod install --clean-install --repo-update
          fi

      - name: Build iOS App with Manual Signing
        working-directory: ./private-repo
        run: |
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          xcodebuild clean archive \
            -workspace "$IOS_DIR/LittleTalks.xcworkspace" \
            -scheme LittleTalks \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
            ENABLE_BITCODE=NO \
            -jobs 2 \
            -allowProvisioningUpdates

      - name: Create exportOptions.plist
        working-directory: ./private-repo
        run: |
          cat > ios/exportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.littletalks.app</key>
                  <string>match AppStore com.littletalks.app</string>
                  <key>com.littletalks.app.OneSignalNotificationServiceExt</key>
                  <string>match AppStore com.littletalks.app.OneSignalNotificationServiceExt</string>
              </dict>
          </dict>
          </plist>
          EOF

      - name: Export .ipa file
        working-directory: ./private-repo
        run: |
          mkdir -p "$(dirname "$EXPORT_PATH")"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$IOS_DIR/exportOptions.plist" \
            -exportPath "$EXPORT_PATH" \
            -verbose

      - name: Upload to TestFlight
        working-directory: ./private-repo/ios
        continue-on-error: true
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          export IPA_PATH=$(ls build/export/*.ipa)
          fastlane ios beta
          
          if [ $? -eq 0 ]; then
            echo "APP_STORE_STATUS=‚úÖ Uploaded to TestFlight" >> $GITHUB_ENV
          else
            echo "APP_STORE_STATUS=‚ùå TestFlight upload failed" >> $GITHUB_ENV
          fi

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ios/LittleTalks.xcodeproj/project.pbxproj
          git commit -m "feat(ios): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Android Build & Deploy
  android-build:
    runs-on: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-latest' }}
    timeout-minutes: 30
    needs: [setup, android-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    env:
      ANDROID_DIR: ${{ github.workspace }}/private-repo/android
    steps:
      - name: Start Build Timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Check Prerequisites for Store Distribution
        if: ${{ needs.setup.outputs.track == 'production' }}
        run: |
          echo "üîç Checking prerequisites for Google Play distribution..."
          UI_TESTS_PASSED="${{ needs.android-ui-tests.outputs.ui_tests_passed }}"
          UNIT_TESTS_PASSED="${{ needs.unit-tests.result == 'success' }}"
          
          if [[ "$UI_TESTS_PASSED" != "true" ]] || [[ "$UNIT_TESTS_PASSED" != "true" ]]; then
            echo "‚ùå Cannot distribute to Google Play: All tests must pass"
            exit 1
          fi
          echo "‚úÖ All prerequisites met for Google Play distribution"

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Install Java
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/setup-java@v4' || 'actions/setup-java@v4' }}
        with:
          java-version: 17
          cache: gradle
          distribution: adopt

      - name: Setup Node
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/setup-node@v4' || 'actions/setup-node@v4' }}
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Modules
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Cache Gradle
        uses: ${{ needs.setup.outputs.runner_type == 'buildjet' && 'buildjet/cache@v3' || 'actions/cache@v3' }}
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Bump Version Name and Code
        working-directory: ./private-repo/android/app
        run: |
          CURRENT_VERSION_NAME=$(grep versionName build.gradle | sed -E 's/.*"(.*)"/\1/')
          CURRENT_VERSION_CODE=$(grep "versionCode project.hasProperty" build.gradle | sed -E 's/.*: ([0-9]+).*/\1/')
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION_NAME"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION_NAME="$MAJOR.$MINOR.$NEXT_PATCH"
          NEXT_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          echo "NEXT_VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
          echo "NEXT_VERSION_CODE=$NEXT_VERSION_CODE" >> $GITHUB_ENV
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEXT_VERSION_NAME\"/" build.gradle
          sed -i "s/: $CURRENT_VERSION_CODE/: $NEXT_VERSION_CODE/" build.gradle

      - name: Build Release AAB
        working-directory: ./private-repo/android
        run: |
          ./gradlew bundleRelease \
            -PsigningKeystorePassword="${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}" \
            -PsigningKeyAlias="${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}" \
            -PsigningKeyPassword="${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}" \
            -PlittleVersionCode=${{ env.NEXT_VERSION_CODE }} \
            --stacktrace

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        continue-on-error: true
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.littletalks.app
          releaseFiles: ./private-repo/android/app/build/outputs/bundle/release/app-release.aab
          track: ${{ needs.setup.outputs.track }}
          status: ${{ needs.setup.outputs.track == 'production' && 'completed' || 'draft' }}

      - name: Set Google Play Status
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_STATUS=‚úÖ Uploaded to Google Play (${{ needs.setup.outputs.track }})" >> $GITHUB_ENV

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git commit -m "feat(android): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Summary
  summary:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, ios-ui-tests, android-ui-tests, ios-build, android-build]
    if: always()
    steps:
      - name: LittlePipes Build Summary
        run: |
          echo "üöÄ LittlePipes Build Complete!"
          echo "Target: ${{ needs.setup.outputs.target_repo }}"
          echo "Runner Type: ${{ needs.setup.outputs.runner_type }}"
          echo ""
          echo "üß™ Unit Tests: ${{ needs.unit-tests.result || '‚è≠Ô∏è Skipped' }}"
          echo ""
          echo "üì± iOS Results:"
          echo "  UI Tests: ${{ needs.ios-ui-tests.outputs.ui_test_status || '‚è≠Ô∏è Skipped' }}"
          echo "  Build: ${{ needs.ios-build.result || '‚è≠Ô∏è Skipped' }}"
          echo ""
          echo "ü§ñ Android Results:"  
          echo "  UI Tests: ${{ needs.android-ui-tests.outputs.ui_test_status || '‚è≠Ô∏è Skipped' }}"
          echo "  Build: ${{ needs.android-build.result || '‚è≠Ô∏è Skipped' }}"
          echo ""
          echo "üí∞ Cost: ~1 minute charged to private repo"
          echo "‚ö° Execution: UNLIMITED minutes for all builds"
          echo "üéØ Platforms ran in PARALLEL for maximum efficiency!"
          echo ""
          echo "üîó Monitor builds: https://github.com/${{ github.repository }}/actions"