name: LittlePipes Unified Build, Test & Deploy

on:
  repository_dispatch:
    types: [build-ios, build-android, build-both]
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository'
        required: true
        default: 'Kobumura/littletalks-mobile'
      platform:
        type: choice
        options: [ios, android, both]
        default: 'both'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target_repo: ${{ steps.config.outputs.target_repo }}
      build_ios: ${{ steps.config.outputs.build_ios }}
      build_android: ${{ steps.config.outputs.build_android }}
      run_ui_tests: ${{ steps.config.outputs.run_ui_tests }}
      run_unit_tests: ${{ steps.config.outputs.run_unit_tests }}
      run_build: ${{ steps.config.outputs.run_build }}
      track: ${{ steps.config.outputs.track }}
      fail_fast: ${{ steps.config.outputs.fail_fast }}
      runner_type: ${{ steps.config.outputs.runner_type }}
    steps:
      - name: Configure Build
        id: config
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            TARGET_REPO="${{ github.event.client_payload.target_repo }}"
            PLATFORM="${{ github.event.client_payload.platform || 'both' }}"
            RUN_UI_TESTS="${{ github.event.client_payload.run_ui_tests || 'true' }}"
            RUN_UNIT_TESTS="${{ github.event.client_payload.run_unit_tests || 'true' }}"
            RUN_BUILD="${{ github.event.client_payload.run_build || 'true' }}"
            TRACK="${{ github.event.client_payload.track || 'internal' }}"
            FAIL_FAST="${{ github.event.client_payload.fail_fast || 'true' }}"
            RUNNER_TYPE="${{ github.event.client_payload.runner_type || 'github' }}"
          else
            TARGET_REPO="${{ inputs.target_repo }}"
            PLATFORM="${{ inputs.platform || 'both' }}"
            RUN_UI_TESTS="true"
            RUN_UNIT_TESTS="true"
            RUN_BUILD="true"
            TRACK="internal"
            FAIL_FAST="true"
            RUNNER_TYPE="github"
          fi
          
          echo "target_repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "build_ios=$([[ $PLATFORM == "ios" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "build_android=$([[ $PLATFORM == "android" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "run_ui_tests=$RUN_UI_TESTS" >> $GITHUB_OUTPUT
          echo "run_unit_tests=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "fail_fast=$FAIL_FAST" >> $GITHUB_OUTPUT
          echo "runner_type=$RUNNER_TYPE" >> $GITHUB_OUTPUT
          
          echo "🎯 Building $PLATFORM for $TARGET_REPO"

  # iOS UI Tests - CORRECTED VERSION
  ios-ui-tests:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      # FIXED: Maestro Setup with proper PATH persistence
      - name: Setup Maestro
        run: |
          echo "📦 Installing Maestro..."
          curl -Ls "https://get.maestro.mobile.dev" | bash
          
          # Add to PATH for current step
          export PATH="$PATH":"$HOME/.maestro/bin"
          
          # Persist PATH for subsequent steps (CRITICAL FIX)
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          
          # Verify installation works
          echo "✅ Maestro installation verification:"
          $HOME/.maestro/bin/maestro --version
          
          # Create symlink as additional fallback
          sudo ln -sf "$HOME/.maestro/bin/maestro" /usr/local/bin/maestro || true

      - name: Simple Xcode Setup
        run: |
          echo "🔧 Using available Xcode installation..."
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          echo "📋 Xcode version:"
          xcodebuild -version

      - name: Install CocoaPods Dependencies
        working-directory: ./private-repo/ios
        run: |
          echo "📦 Installing CocoaPods dependencies..."
          pod install
          echo "✅ CocoaPods installation complete"

      - name: Start Metro Bundler
        working-directory: ./private-repo
        run: |
          echo "🚀 Starting Metro bundler..."
          npx react-native start --reset-cache > metro.log 2>&1 &
          METRO_PID=$!
          echo $METRO_PID > metro.pid
          echo "METRO_PID=$METRO_PID" >> $GITHUB_ENV
          
          # Enhanced wait for Metro with status checking
          echo "⏱️ Waiting for Metro to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8081/status | grep -q "packager-status:running"; then
              echo "✅ Metro is ready after ${i} attempts"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Metro failed to start after 60 attempts"
              cat metro.log
              exit 1
            fi
            echo "⏳ Metro not ready yet, attempt $i/60..."
            sleep 2
          done
          
          # Additional wait to ensure Metro is fully stable
          echo "⏱️ Additional wait for Metro stability..."
          sleep 15

      - name: Start iOS Simulator
        run: |
          echo "🍎 Creating iOS Simulator..."
          
          # Create any available iPhone simulator
          SIMULATOR_ID=$(xcrun simctl create "Test-iPhone" "iPhone 15" 2>/dev/null || \
                        xcrun simctl create "Test-iPhone" "iPhone 14" 2>/dev/null || \
                        xcrun simctl create "Test-iPhone" "iPhone 13" 2>/dev/null)
          
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          echo "Created simulator: $SIMULATOR_ID"
          
          # Boot simulator
          xcrun simctl boot $SIMULATOR_ID
          
          # Enhanced wait with status checking
          echo "⏱️ Waiting for simulator to be ready..."
          for i in {1..30}; do
            if xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -q "Booted"; then
              echo "✅ Simulator is booted after ${i} attempts"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Simulator failed to boot after 30 attempts"
              exit 1
            fi
            echo "⏳ Simulator not ready yet, attempt $i/30..."
            sleep 3
          done
          
          # Additional wait for simulator to be fully ready
          echo "⏱️ Additional wait for simulator stability..."
          sleep 10

      - name: Build iOS App for Testing
        working-directory: ./private-repo
        run: |
          echo "🔨 Building iOS app for simulator..."
          cd ios
          xcodebuild \
            -workspace LittleTalks.xcworkspace \
            -scheme LittleTalks \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath ./build \
            build
          echo "✅ iOS app built successfully for testing"

      - name: Install App on Simulator
        working-directory: ./private-repo
        run: |
          echo "📲 Installing app on simulator..."
          APP_PATH=$(find ios/build -name "LittleTalks.app" | head -1)
          echo "App path: $APP_PATH"
          xcrun simctl install "$SIMULATOR_ID" "$APP_PATH"
          echo "✅ App installed on simulator"

      - name: Launch App and Wait for Bundle
        run: |
          echo "🚀 Launching LittleTalks app..."
          xcrun simctl launch "$SIMULATOR_ID" com.littletalks.app
          
          echo "⏱️ Waiting for app installation and initial load..."
          sleep 30

      # FIXED: Maestro execution with multiple fallback methods
      - name: Run Maestro UI Tests
        working-directory: ./private-repo
        run: |
          echo "🧪 Running Maestro UI tests..."
          
          # Verify environment
          echo "📱 Available devices:"
          xcrun simctl list devices | grep -E "(Booted|iPhone)" || true
          echo "📊 Metro status:"
          curl -s http://localhost:8081/status || echo "Metro status check failed"
          
          # Check Maestro availability with multiple methods
          echo "🔧 Maestro availability check:"
          echo "PATH: $PATH"
          echo "which maestro: $(which maestro 2>/dev/null || echo 'not found in PATH')"
          echo "Direct path test: $($HOME/.maestro/bin/maestro --version 2>/dev/null || echo 'direct path failed')"
          echo "Symlink test: $(/usr/local/bin/maestro --version 2>/dev/null || echo 'symlink not available')"
          
          # Run test with fallback strategy
          UI_TEST_SUCCESS=true
          if command -v maestro &> /dev/null; then
            echo "✅ Using maestro from PATH"
            if ! maestro test .maestro/signup-flow.yml; then
              echo "❌ Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          elif [ -f "$HOME/.maestro/bin/maestro" ]; then
            echo "✅ Using maestro from direct path"
            if ! $HOME/.maestro/bin/maestro test .maestro/signup-flow.yml; then
              echo "❌ Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          elif [ -f "/usr/local/bin/maestro" ]; then
            echo "✅ Using maestro from symlink"
            if ! /usr/local/bin/maestro test .maestro/signup-flow.yml; then
              echo "❌ Maestro UI tests failed!"
              UI_TEST_SUCCESS=false
            fi
          else
            echo "❌ Maestro not found anywhere!"
            UI_TEST_SUCCESS=false
          fi
          
          if [ "$UI_TEST_SUCCESS" = "true" ]; then
            echo "✅ Maestro UI tests completed successfully!"
          else
            # Capture failure details
            echo "📋 Metro logs:"
            tail -50 metro.log || true
            echo "📱 Final simulator status:"
            xcrun simctl list devices | grep "$SIMULATOR_ID" || true
          fi
          
          echo "UI_TEST_SUCCESS=$UI_TEST_SUCCESS" >> $GITHUB_ENV

      - name: Set UI Test Results
        id: ui_test_results
        if: always()
        run: |
          UI_TEST_END=$(date +%s)
          UI_TEST_DURATION=$(( UI_TEST_END - UI_TEST_START ))
          
          if [[ "$UI_TEST_SUCCESS" == "true" ]]; then
            echo "status=✅ iOS UI Tests Passed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro completed in ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "status=❌ iOS UI Tests Failed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro failed after ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup UI Tests
        if: always()
        working-directory: ./private-repo
        run: |
          if [ -f metro.pid ]; then
            echo "🧹 Stopping Metro..."
            kill $(cat metro.pid) 2>/dev/null || true
          fi
          if [ -n "$SIMULATOR_ID" ]; then
            echo "🧹 Cleaning up simulator..."
            xcrun simctl shutdown $SIMULATOR_ID 2>/dev/null || true
            xcrun simctl delete $SIMULATOR_ID 2>/dev/null || true
          fi

      - name: Upload UI Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ui-test-artifacts
          path: |
            ./private-repo/metro.log
            ~/.maestro/tests/
            ~/.maestro/screenshots/
          retention-days: 3

      - name: Check UI Test Failure
        if: ${{ env.UI_TEST_SUCCESS == 'false' && needs.setup.outputs.fail_fast != 'false' }}
        run: |
          echo "❌ UI tests failed and fail_fast is enabled. Stopping workflow."
          exit 1

  # Android UI Tests
  android-ui-tests:
    runs-on: buildjet-4vcpu-ubuntu-2204
    timeout-minutes: 40
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      # [Android UI test setup omitted for brevity]

      - name: Run Android Maestro UI Tests
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 25
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          working-directory: ./private-repo
          script: |
            echo "📱 Installing APK on emulator..."
            adb install android/app/build/outputs/apk/debug/app-debug.apk
            echo "🚀 Launching LittleTalks app..."
            adb shell am start -n com.littletalks.app/.MainActivity
            sleep 3
            echo "🧪 Running Maestro UI tests"
            maestro test ".maestro/signup-flow.yml"
            echo "✅ Android UI tests completed successfully"

      - name: Cleanup Android UI Tests
        if: always()
        working-directory: ./private-repo
        run: |
          if [ -f metro.pid ]; then
            kill $(cat metro.pid) 2>/dev/null || true
          fi

  # Unit Tests
  unit-tests:
    runs-on: buildjet-4vcpu-ubuntu-2204
    needs: setup
    if: ${{ needs.setup.outputs.run_unit_tests == 'true' }}
    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Run Unit Tests
        working-directory: ./private-repo
        run: |
          echo "🧪 Running unit tests..."
          npm test -- --coverage --watchAll=false
          echo "✅ Unit tests completed!"

  # iOS Build & Deploy
  ios-build:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, ios-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    env:
      IOS_DIR: ${{ github.workspace }}/private-repo/ios
      ARCHIVE_PATH: ${{ github.workspace }}/private-repo/ios/build/LittleTalks.xcarchive
      EXPORT_PATH: ${{ github.workspace }}/private-repo/ios/build/export
    steps:
      # [iOS build steps omitted for brevity]
      - name: Upload to TestFlight
        working-directory: ./private-repo/ios
        continue-on-error: true
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          export IPA_PATH=$(ls build/export/*.ipa)
          echo "Uploading $IPA_PATH to TestFlight…"
          fastlane ios beta
          
          if [ $? -eq 0 ]; then
            echo "APP_STORE_STATUS=✅ Uploaded to TestFlight" >> $GITHUB_ENV
          else
            echo "APP_STORE_STATUS=❌ TestFlight upload failed" >> $GITHUB_ENV
          fi

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ios/LittleTalks.xcodeproj/project.pbxproj
          git commit -m "feat(ios): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Android Build & Deploy
  android-build:
    runs-on: buildjet-4vcpu-ubuntu-2204
    timeout-minutes: 30
    needs: [setup, android-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    env:
      ANDROID_DIR: ${{ github.workspace }}/private-repo/android
    steps:
      - name: Start Build Timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Check Prerequisites for Store Distribution
        if: ${{ needs.setup.outputs.track == 'production' }}
        run: |
          echo "🔍 Checking prerequisites for Google Play distribution..."
          UI_TESTS_PASSED="${{ needs.android-ui-tests.outputs.ui_tests_passed }}"
          if [[ "$UI_TESTS_PASSED" != "true" ]]; then
            echo "❌ Cannot distribute to Google Play: All tests must pass"
            exit 1
          fi
          echo "✅ All prerequisites met for Google Play distribution"

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Install Java
        uses: buildjet/setup-java@v4
        with:
          java-version: 17
          cache: gradle
          distribution: adopt

      - name: Setup Node
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Modules
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Cache Gradle
        uses: buildjet/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Bump Version Name and Code
        working-directory: ./private-repo/android/app
        run: |
          CURRENT_VERSION_NAME=$(grep versionName build.gradle | sed -E 's/.*"(.*)"/\1/')
          CURRENT_VERSION_CODE=$(grep "versionCode project.hasProperty" build.gradle | sed -E 's/.*: ([0-9]+).*/\1/')
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION_NAME"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION_NAME="$MAJOR.$MINOR.$NEXT_PATCH"
          NEXT_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          echo "NEXT_VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
          echo "NEXT_VERSION_CODE=$NEXT_VERSION_CODE" >> $GITHUB_ENV
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEXT_VERSION_NAME\"/" build.gradle
          sed -i "s/: $CURRENT_VERSION_CODE/: $NEXT_VERSION_CODE/" build.gradle
          echo "✅ Version bumped to $NEXT_VERSION_NAME (code: $NEXT_VERSION_CODE)"

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        continue-on-error: true
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.littletalks.app
          releaseFiles: ./private-repo/android/app/build/outputs/bundle/release/app-release.aab
          track: ${{ needs.setup.outputs.track }}
          status: ${{ needs.setup.outputs.track == 'production' && 'completed' || 'draft' }}

      - name: Set Google Play Status
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          BUILD_DURATION=$(( BUILD_END - BUILD_START ))
          HOURS=$((BUILD_DURATION / 3600))
          MINUTES=$(( (BUILD_DURATION % 3600) / 60 ))
          SECONDS=$((BUILD_DURATION % 60))
          printf -v BUILD_DURATION_FMT "%02d:%02d:%02d" $HOURS $MINUTES $SECONDS
          echo "BUILD_DURATION=$BUILD_DURATION_FMT" >> $GITHUB_ENV
          echo "GOOGLE_PLAY_STATUS=✅ Uploaded to Google Play (${{ needs.setup.outputs.track }})" >> $GITHUB_ENV

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git commit -m "feat(android): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Summary
  summary:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, ios-ui-tests, android-ui-tests, ios-build, android-build]
    if: always()
    steps:
      - name: LittlePipes Build Summary
        run: |
          echo "🚀 LittlePipes Build Complete!"
          echo "Target: ${{ needs.setup.outputs.target_repo }}"
          echo ""
          echo "🧪 Unit Tests: ${{ needs.unit-tests.result || '⏭️ Skipped' }}"
          echo ""
          echo "📱 iOS Results:"
          echo "  UI Tests: ${{ needs.ios-ui-tests.outputs.ui_test_status || '⏭️ Skipped' }}"
          echo "  Build: ${{ needs.ios-build.result || '⏭️ Skipped' }}"
          echo ""
          echo "🤖 Android Results:"  
          echo "  UI Tests: ${{ needs.android-ui-tests.outputs.ui_test_status || '⏭️ Skipped' }}"
          echo "  Build: ${{ needs.android-build.result || '⏭️ Skipped' }}"
          echo ""
          echo "💰 Cost: ~1 minute charged to private repo"
          echo "⚡ Execution: UNLIMITED minutes for all builds"
          echo "🎯 Platforms ran in PARALLEL for maximum efficiency!"
          echo ""
          echo "🔗 Monitor builds: https://github.com/${{ github.repository }}/actions"
