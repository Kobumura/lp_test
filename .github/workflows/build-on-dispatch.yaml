name: LittlePipes Unified Build, Test & Deploy

on:
  repository_dispatch:
    types: [build-ios, build-android, build-both]
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository'
        required: true
        default: 'Kobumura/littletalks-mobile'
      platform:
        type: choice
        options: [ios, android, both]
        default: 'both'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target_repo: ${{ steps.config.outputs.target_repo }}
      build_ios: ${{ steps.config.outputs.build_ios }}
      build_android: ${{ steps.config.outputs.build_android }}
      run_ui_tests: ${{ steps.config.outputs.run_ui_tests }}
      run_unit_tests: ${{ steps.config.outputs.run_unit_tests }}
      run_build: ${{ steps.config.outputs.run_build }}
      track: ${{ steps.config.outputs.track }}
      fail_fast: ${{ steps.config.outputs.fail_fast }}
      runner_type: ${{ steps.config.outputs.runner_type }}
    steps:
      - name: Configure Build
        id: config
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            TARGET_REPO="${{ github.event.client_payload.target_repo }}"
            PLATFORM="${{ github.event.client_payload.platform || 'both' }}"
            RUN_UI_TESTS="${{ github.event.client_payload.run_ui_tests || 'true' }}"
            RUN_UNIT_TESTS="${{ github.event.client_payload.run_unit_tests || 'true' }}"
            RUN_BUILD="${{ github.event.client_payload.run_build || 'true' }}"
            TRACK="${{ github.event.client_payload.track || 'internal' }}"
            FAIL_FAST="${{ github.event.client_payload.fail_fast || 'true' }}"
            RUNNER_TYPE="${{ github.event.client_payload.runner_type || 'github' }}"
          else
            TARGET_REPO="${{ inputs.target_repo }}"
            PLATFORM="${{ inputs.platform || 'both' }}"
            RUN_UI_TESTS="true"
            RUN_UNIT_TESTS="true"
            RUN_BUILD="true"
            TRACK="internal"
            FAIL_FAST="true"
            RUNNER_TYPE="github"
          fi
          
          echo "target_repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "build_ios=$([[ $PLATFORM == "ios" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "build_android=$([[ $PLATFORM == "android" || $PLATFORM == "both" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "run_ui_tests=$RUN_UI_TESTS" >> $GITHUB_OUTPUT
          echo "run_unit_tests=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "fail_fast=$FAIL_FAST" >> $GITHUB_OUTPUT
          echo "runner_type=$RUNNER_TYPE" >> $GITHUB_OUTPUT
          
          echo "🎯 Building $PLATFORM for $TARGET_REPO"

  # iOS UI Tests - Full implementation
  ios-ui-tests:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      # WarpBuild setup, Xcode setup, CocoaPods, Maestro, Metro, Simulator, etc.
      # [All the iOS UI test steps from buildTestDeploy-ios.yaml]

      - name: Run iOS Maestro UI Tests
        working-directory: ./private-repo
        run: |
          echo "🧪 Running iOS Maestro UI tests on unlimited minutes..."
          maestro test .maestro/signup-flow.yml
          echo "✅ iOS UI tests completed successfully!"

      - name: Set UI Test Results
        id: ui_test_results
        if: always()
        run: |
          UI_TEST_END=$(date +%s)
          UI_TEST_DURATION=$(( UI_TEST_END - UI_TEST_START ))
          echo "status=✅ iOS UI Tests Passed" >> $GITHUB_OUTPUT
          echo "details=iOS Maestro completed in ${UI_TEST_DURATION}s" >> $GITHUB_OUTPUT
          echo "passed=true" >> $GITHUB_OUTPUT

  # Android UI Tests - Full implementation
  android-ui-tests:
    runs-on: buildjet-4vcpu-ubuntu-2204
    timeout-minutes: 40
    needs: [setup, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      # Android UI test setup and execution
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Java
        uses: buildjet/setup-java@v4
        with:
          java-version: 17
          distribution: adopt

      - name: Backup & enhance gradle.properties
        working-directory: ./private-repo
        run: |
          cp android/gradle.properties android/gradle.properties.backup || echo "No gradle.properties"
          echo "" >> android/gradle.properties
          cat >> android/gradle.properties << EOF
          org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.unsafe.configuration-cache=false
          EOF

      - name: Cache Gradle
        uses: buildjet/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          $HOME/.maestro/bin/maestro --version

      - name: Start Metro Bundler
        working-directory: ./private-repo
        run: |
          echo "🚀 Starting Metro bundler..."
          npx react-native start --reset-cache > metro.log 2>&1 &
          METRO_PID=$!
          echo $METRO_PID > metro.pid
          echo "METRO_PID=$METRO_PID" >> $GITHUB_ENV
          
          for i in {1..60}; do
            if curl -s http://localhost:8081/status | grep -q "packager-status:running"; then
              echo "✅ Metro is ready after ${i} attempts"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Metro failed to start after 60 attempts"
              cat metro.log && exit 1
            fi
            sleep 2
          done
          sleep 15

      - name: Build Android APK
        working-directory: ./private-repo
        run: |
          cd android && ./gradlew clean && ./gradlew assembleDebug --stacktrace
          echo "✅ Android APK built successfully"

      - name: Run Android Maestro UI Tests
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 25
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          working-directory: ./private-repo
          script: |
            echo "📱 Installing APK on emulator..."
            adb install android/app/build/outputs/apk/debug/app-debug.apk
            echo "🚀 Launching LittleTalks app..."
            adb shell am start -n com.littletalks.app/.MainActivity
            sleep 3
            echo "🧪 Running Maestro UI tests"
            maestro test ".maestro/signup-flow.yml"
            echo "✅ Android UI tests completed successfully"

      - name: Cleanup Android UI Tests
        if: always()
        working-directory: ./private-repo
        run: |
          if [ -f metro.pid ]; then
            kill $(cat metro.pid) 2>/dev/null || true
          fi

  # Unit Tests - Fast fail gate, run FIRST and ONCE on cheap Ubuntu
  unit-tests:
    runs-on: buildjet-4vcpu-ubuntu-2204  # Cheap Linux runner for JS tests
    needs: setup
    if: ${{ needs.setup.outputs.run_unit_tests == 'true' }}

    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Run Unit Tests
        working-directory: ./private-repo
        run: |
          echo "🧪 Running unit tests on cheap Ubuntu runner..."
          npm test -- --coverage --watchAll=false
          echo "✅ Unit tests completed!"

  # iOS Build & Deploy - Full implementation
  ios-build:
    runs-on: ${{ needs.setup.outputs.runner_type == 'warpbuild' && 'warp-macos-latest-arm64-6x' || 'macos-15' }}
    needs: [setup, ios-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}

    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

    env:
      IOS_DIR: ${{ github.workspace }}/private-repo/ios
      ARCHIVE_PATH: ${{ github.workspace }}/private-repo/ios/build/LittleTalks.xcarchive
      EXPORT_PATH: ${{ github.workspace }}/private-repo/ios/build/export

    steps:
      - name: Start Build Timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Check Prerequisites for Store Distribution
        if: ${{ needs.setup.outputs.track == 'production' }}
        run: |
          echo "🔍 Checking prerequisites for App Store distribution..."
          UI_TESTS_PASSED="${{ needs.ios-ui-tests.outputs.ui_tests_passed }}"
          UNIT_TESTS_PASSED="true"
          
          if [[ "$UI_TESTS_PASSED" != "true" ]]; then
            echo "❌ Cannot distribute to App Store: All tests must pass"
            exit 1
          fi
          echo "✅ All prerequisites met for App Store distribution"

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: WarpBuild Xcode & CocoaPods Compatibility
        if: contains(needs.setup.outputs.runner_type, 'warpbuild')
        working-directory: ./private-repo
        run: |
          echo "🚀 Configuring WarpBuild for optimal performance..."
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          xcodebuild -version
          cd ios && rm -rf Pods/ Podfile.lock && rm -rf ~/Library/Caches/CocoaPods
          pod repo update --silent && echo "✅ WarpBuild compatibility complete" && cd ..

      - name: Read and increment iOS version
        working-directory: ./private-repo
        run: |
          PBXPROJ_PATH="ios/LittleTalks.xcodeproj/project.pbxproj"
          CURRENT_VERSION=$(grep -o "MARKETING_VERSION = [^;]*" "$PBXPROJ_PATH" | head -n1 | sed 's/MARKETING_VERSION = //' | tr -d ';')
          CURRENT_BUILD=$(grep -o "CURRENT_PROJECT_VERSION = [^;]*" "$PBXPROJ_PATH" | head -n1 | sed 's/CURRENT_PROJECT_VERSION = //' | tr -d ';')
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
          NEXT_BUILD=$((CURRENT_BUILD + 1))
          
          echo "NEXT_VERSION_NAME=$NEXT_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION_CODE=$NEXT_BUILD" >> $GITHUB_ENV
          
          sed -i.bak "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = $NEXT_VERSION/g" "$PBXPROJ_PATH"
          sed -i.bak "s/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = $NEXT_BUILD/g" "$PBXPROJ_PATH"
          echo "✅ Version bumped to $NEXT_VERSION (build $NEXT_BUILD)"

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Install CocoaPods & Fastlane
        run: gem install cocoapods fastlane

      - name: Create Match Keychain
        run: |
          security create-keychain -p "12345678" ~/Library/Keychains/ios-build.keychain
          security set-keychain-settings -lut 21600 ~/Library/Keychains/ios-build.keychain
          security unlock-keychain -p "12345678" ~/Library/Keychains/ios-build.keychain
          security list-keychains -d user -s ~/Library/Keychains/ios-build.keychain $(security list-keychains -d user | sed s/\"//g)

      - name: Setup SSH key for Match
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MATCH_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Setup Match certificates
        working-directory: ./private-repo/ios
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          fastlane match appstore --git_url "$MATCH_GIT_URL" --app_identifier "com.littletalks.app" --team_id "$APPLE_TEAM_ID" --readonly true --force_for_new_devices false
          fastlane match appstore --git_url "$MATCH_GIT_URL" --app_identifier "com.littletalks.app.OneSignalNotificationServiceExt" --team_id "$APPLE_TEAM_ID" --readonly true --force_for_new_devices false

      - name: Install CocoaPods dependencies
        working-directory: ./private-repo/ios
        run: |
          if [[ "${{ needs.setup.outputs.runner_type }}" == *"warp"* ]]; then
            pod install --clean-install --repo-update
          else
            pod install --clean-install --repo-update
          fi

      - name: Build iOS Archive
        working-directory: ./private-repo
        run: |
          mkdir -p "$(dirname "$ARCHIVE_PATH")"
          xcodebuild clean archive \
            -workspace "$IOS_DIR/LittleTalks.xcworkspace" \
            -scheme LittleTalks \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
            ENABLE_BITCODE=NO \
            -jobs 2 \
            -allowProvisioningUpdates

      - name: Create exportOptions.plist
        working-directory: ./private-repo
        run: |
          cat > ios/exportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>com.littletalks.app</key>
                  <string>match AppStore com.littletalks.app</string>
                  <key>com.littletalks.app.OneSignalNotificationServiceExt</key>
                  <string>match AppStore com.littletalks.app.OneSignalNotificationServiceExt</string>
              </dict>
          </dict>
          </plist>
          EOF

      - name: Export .ipa file
        working-directory: ./private-repo
        run: |
          mkdir -p "$(dirname "$EXPORT_PATH")"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$IOS_DIR/exportOptions.plist" \
            -exportPath "$EXPORT_PATH" \
            -verbose

      - name: Upload to TestFlight
        working-directory: ./private-repo/ios
        continue-on-error: true
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          export IPA_PATH=$(ls build/export/*.ipa)
          echo "Uploading $IPA_PATH to TestFlight…"
          fastlane ios beta
          
          if [ $? -eq 0 ]; then
            echo "APP_STORE_STATUS=✅ Uploaded to TestFlight" >> $GITHUB_ENV
          else
            echo "APP_STORE_STATUS=❌ TestFlight upload failed" >> $GITHUB_ENV
          fi

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ios/LittleTalks.xcodeproj/project.pbxproj
          git commit -m "feat(ios): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Android Build & Deploy - Full implementation
  android-build:
    runs-on: buildjet-4vcpu-ubuntu-2204
    timeout-minutes: 30
    needs: [setup, android-ui-tests, unit-tests]
    if: ${{ needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_build == 'true' && (success() || needs.setup.outputs.fail_fast == 'false') }}

    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

    env:
      ANDROID_DIR: ${{ github.workspace }}/private-repo/android

    steps:
      - name: Start Build Timer
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

      - name: Check Prerequisites for Store Distribution
        if: ${{ needs.setup.outputs.track == 'production' }}
        run: |
          echo "🔍 Checking prerequisites for Google Play distribution..."
          UI_TESTS_PASSED="${{ needs.android-ui-tests.outputs.ui_tests_passed }}"
          UNIT_TESTS_PASSED="true"
          
          if [[ "$UI_TESTS_PASSED" != "true" ]]; then
            echo "❌ Cannot distribute to Google Play: All tests must pass"
            exit 1
          fi
          echo "✅ All prerequisites met for Google Play distribution"

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Install Java
        uses: buildjet/setup-java@v4
        with:
          java-version: 17
          cache: gradle
          distribution: adopt

      - name: Setup Node
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Modules
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Cache Gradle
        uses: buildjet/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Bump Version Name and Code
        working-directory: ./private-repo/android/app
        run: |
          CURRENT_VERSION_NAME=$(grep versionName build.gradle | sed -E 's/.*"(.*)"/\1/')
          CURRENT_VERSION_CODE=$(grep "versionCode project.hasProperty" build.gradle | sed -E 's/.*: ([0-9]+).*/\1/')
          
          if [ -z "$CURRENT_VERSION_CODE" ]; then
            CURRENT_VERSION_CODE="124"
          fi
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION_NAME"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION_NAME="$MAJOR.$MINOR.$NEXT_PATCH"
          NEXT_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          
          echo "NEXT_VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
          echo "NEXT_VERSION_CODE=$NEXT_VERSION_CODE" >> $GITHUB_ENV
          
          sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEXT_VERSION_NAME\"/" build.gradle
          sed -i "s/: $CURRENT_VERSION_CODE/: $NEXT_VERSION_CODE/" build.gradle
          echo "✅ Version bumped to $NEXT_VERSION_NAME (code: $NEXT_VERSION_CODE)"

      - name: Build Release AAB
        working-directory: ./private-repo/android
        run: |
          ./gradlew bundleRelease \
            -PsigningKeystorePassword="${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}" \
            -PsigningKeyAlias="${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}" \
            -PsigningKeyPassword="${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}" \
            -PlittleVersionCode=${{ env.NEXT_VERSION_CODE }} \
            --stacktrace
          
          AAB_PATH="app/build/outputs/bundle/release/app-release.aab"
          AAB_SIZE=$(du -h "$AAB_PATH" | cut -f1)
          echo "BUNDLE_SIZE=$AAB_SIZE" >> $GITHUB_ENV

      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        continue-on-error: true
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.littletalks.app
          releaseFiles: ./private-repo/android/app/build/outputs/bundle/release/app-release.aab
          track: ${{ needs.setup.outputs.track }}
          status: ${{ needs.setup.outputs.track == 'production' && 'completed' || 'draft' }}

      - name: Set Google Play Status
        run: |
          echo "BUILD_END=$(date +%s)" >> $GITHUB_ENV
          BUILD_DURATION=$(( BUILD_END - BUILD_START ))
          HOURS=$((BUILD_DURATION / 3600))
          MINUTES=$(( (BUILD_DURATION % 3600) / 60 ))
          SECONDS=$((BUILD_DURATION % 60))
          printf -v BUILD_DURATION_FMT "%02d:%02d:%02d" $HOURS $MINUTES $SECONDS
          echo "BUILD_DURATION=$BUILD_DURATION_FMT" >> $GITHUB_ENV
          
          echo "GOOGLE_PLAY_STATUS=✅ Uploaded to Google Play (${{ needs.setup.outputs.track }})" >> $GITHUB_ENV

      - name: Commit version bump to private repo
        working-directory: ./private-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add android/app/build.gradle
          git commit -m "feat(android): bump version to ${{ env.NEXT_VERSION_NAME }} (build ${{ env.NEXT_VERSION_CODE }}) [skip ci]" || exit 0
          git push

  # Summary - Reports results from both platforms
  summary:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, ios-ui-tests, android-ui-tests, ios-build, android-build]
    if: always()
    steps:
      - name: LittlePipes Build Summary
        run: |
          echo "🚀 LittlePipes Build Complete!"
          echo "Target: ${{ needs.setup.outputs.target_repo }}"
          echo ""
          echo "🧪 Unit Tests: ${{ needs.unit-tests.result || '⏭️ Skipped' }}"
          echo ""
          echo "📱 iOS Results:"
          echo "  UI Tests: ${{ needs.ios-ui-tests.outputs.ui_test_status || '⏭️ Skipped' }}"
          echo "  Build: ${{ needs.ios-build.result || '⏭️ Skipped' }}"
          echo ""
          echo "🤖 Android Results:"  
          echo "  UI Tests: ${{ needs.android-ui-tests.outputs.ui_test_status || '⏭️ Skipped' }}"
          echo "  Build: ${{ needs.android-build.result || '⏭️ Skipped' }}"
          echo ""
          echo "💰 Cost: ~1 minute charged to private repo"
          echo "⚡ Execution: UNLIMITED minutes for all builds"
          echo "🎯 Platforms ran in PARALLEL for maximum efficiency!"
          echo ""
          echo "🔗 Monitor builds: https://github.com/${{ github.repository }}/actions"