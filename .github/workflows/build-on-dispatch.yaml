name: LittlePipes Unified Build, Test & Deploy

on:
  repository_dispatch:
    types: [build-ios, build-android, build-both]
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target repository'
        required: true
        default: 'Kobumura/littletalks-mobile'
      platform:
        description: 'Platform to build'
        type: choice
        options: [ios, android, both]
        default: 'both'
      speed:
        description: 'Runner speed (github=free, fast=optimized runners)'
        type: choice
        options: [github, fast]
        default: 'github'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      target_repo: ${{ steps.config.outputs.target_repo }}
      build_ios: ${{ steps.config.outputs.build_ios }}
      build_android: ${{ steps.config.outputs.build_android }}
      run_ui_tests: ${{ steps.config.outputs.run_ui_tests }}
      run_unit_tests: ${{ steps.config.outputs.run_unit_tests }}
      run_build: ${{ steps.config.outputs.run_build }}
      track: ${{ steps.config.outputs.track }}
      fail_fast: ${{ steps.config.outputs.fail_fast }}
      ios_runner: ${{ steps.config.outputs.ios_runner }}
      android_runner: ${{ steps.config.outputs.android_runner }}
      use_buildjet: ${{ steps.config.outputs.use_buildjet }}
      use_warpbuild: ${{ steps.config.outputs.use_warpbuild }}
    steps:
      - name: Configure Build
        id: config
        run: |
          echo "🎯 LittlePipes Configuration"
          
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            TARGET_REPO="${{ github.event.client_payload.target_repo }}"
            PLATFORM="${{ github.event.client_payload.platform || 'both' }}"
            SPEED="${{ github.event.client_payload.speed || 'github' }}"
            RUN_UI_TESTS="${{ github.event.client_payload.run_ui_tests || 'true' }}"
            RUN_UNIT_TESTS="${{ github.event.client_payload.run_unit_tests || 'true' }}"
            RUN_BUILD="${{ github.event.client_payload.run_build || 'true' }}"
            TRACK="${{ github.event.client_payload.track || 'internal' }}"
            FAIL_FAST="${{ github.event.client_payload.fail_fast || 'true' }}"
          else
            TARGET_REPO="${{ inputs.target_repo }}"
            PLATFORM="${{ inputs.platform }}"
            SPEED="${{ inputs.speed }}"
            RUN_UI_TESTS="true"
            RUN_UNIT_TESTS="true"
            RUN_BUILD="true"
            TRACK="internal"
            FAIL_FAST="true"
          fi
          
          echo "📋 Input Configuration:"
          echo "  Target Repo: $TARGET_REPO"
          echo "  Platform: $PLATFORM"
          echo "  Speed: $SPEED"
          echo "  UI Tests: $RUN_UI_TESTS"
          echo "  Unit Tests: $RUN_UNIT_TESTS"
          echo "  Build: $RUN_BUILD"
          echo "  Track: $TRACK"
          echo "  Fail Fast: $FAIL_FAST"
          
          if [[ "$PLATFORM" == "ios" || "$PLATFORM" == "both" ]]; then
            BUILD_IOS="true"
          else
            BUILD_IOS="false"
          fi
          
          if [[ "$PLATFORM" == "android" || "$PLATFORM" == "both" ]]; then
            BUILD_ANDROID="true"
          else
            BUILD_ANDROID="false"
          fi
          
          if [ "$SPEED" = "fast" ]; then
            IOS_RUNNER="macos-15"
            ANDROID_RUNNER="buildjet-4vcpu-ubuntu-2204"
            USE_BUILDJET="true"
            USE_WARPBUILD="true"
          else
            IOS_RUNNER="macos-15"
            ANDROID_RUNNER="ubuntu-latest"
            USE_BUILDJET="false"
            USE_WARPBUILD="false"
          fi
          
          echo ""
          echo "🚀 Computed Configuration:"
          echo "  Build iOS: $BUILD_IOS"
          echo "  Build Android: $BUILD_ANDROID"
          echo "  iOS Runner: $IOS_RUNNER"
          echo "  Android Runner: $ANDROID_RUNNER"
          echo "  Use BuildJet: $USE_BUILDJET"
          echo "  Use WarpBuild: $USE_WARPBUILD"
          echo ""
          
          echo "target_repo=$TARGET_REPO" >> $GITHUB_OUTPUT
          echo "build_ios=$BUILD_IOS" >> $GITHUB_OUTPUT
          echo "build_android=$BUILD_ANDROID" >> $GITHUB_OUTPUT
          echo "run_ui_tests=$RUN_UI_TESTS" >> $GITHUB_OUTPUT
          echo "run_unit_tests=$RUN_UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "run_build=$RUN_BUILD" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "fail_fast=$FAIL_FAST" >> $GITHUB_OUTPUT
          echo "ios_runner=$IOS_RUNNER" >> $GITHUB_OUTPUT
          echo "android_runner=$ANDROID_RUNNER" >> $GITHUB_OUTPUT
          echo "use_buildjet=$USE_BUILDJET" >> $GITHUB_OUTPUT
          echo "use_warpbuild=$USE_WARPBUILD" >> $GITHUB_OUTPUT
          
          echo ""
          echo "✅ Configuration complete!"

  unit-tests:
    runs-on: ${{ needs.setup.outputs.use_buildjet == 'true' && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-latest' }}
    needs: setup
    if: needs.setup.outputs.run_unit_tests == 'true'
    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ github.event.client_payload.secrets.TARGET_REPO_TOKEN || secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js (buildjet)
        if: needs.setup.outputs.use_buildjet == 'true'
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Setup Node.js (default)
        if: needs.setup.outputs.use_buildjet == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Run Unit Tests
        working-directory: ./private-repo
        run: |
          echo "🧪 Running unit tests..."
          npm test -- --coverage --watchAll=false
          echo "✅ Unit tests completed!"

  ios-ui-tests:
    runs-on: ${{ needs.setup.outputs.ios_runner }}
    needs: [setup, unit-tests]
    if: needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false')
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ github.event.client_payload.secrets.TARGET_REPO_TOKEN || secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Setup Maestro
        run: |
          echo "📦 Installing Maestro..."
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          $HOME/.maestro/bin/maestro --version
          sudo ln -sf "$HOME/.maestro/bin/maestro" /usr/local/bin/maestro || true

      - name: WarpBuild Xcode & CocoaPods Compatibility
        if: needs.setup.outputs.use_warpbuild == 'true'
        working-directory: ./private-repo
        run: |
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          xcodebuild -version
          cd ios
          rm -rf Pods/ Podfile.lock ~/Library/Caches/CocoaPods
          pod repo update --silent
          cd ..

      - name: Simple Xcode Setup
        if: needs.setup.outputs.use_warpbuild == 'false'
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version

      - name: Install CocoaPods Dependencies
        working-directory: ./private-repo/ios
        run: |
          if [[ "${{ needs.setup.outputs.use_warpbuild }}" == "true" ]]; then
            pod install --clean-install --repo-update
          else
            pod install
          fi

      - name: Start Metro Bundler
        working-directory: ./private-repo
        run: |
          npx react-native start --reset-cache > metro.log 2>&1 &
          echo $! > metro.pid
          for i in {1..60}; do
            if curl -s http://localhost:8081/status | grep -q "packager-status:running"; then break; fi
            sleep 2
          done
          sleep 15

      - name: Start iOS Simulator
        run: |
          SIMULATOR_ID=$(xcrun simctl create "Test-iPhone" "iPhone 15" 2>/dev/null || xcrun simctl create "Test-iPhone" "iPhone 14")
          echo "SIMULATOR_ID=$SIMULATOR_ID" >> $GITHUB_ENV
          xcrun simctl boot $SIMULATOR_ID
          for i in {1..30}; do
            if xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -q "Booted"; then break; fi
            sleep 3
          done
          sleep 10

      - name: Build iOS App for Testing
        working-directory: ./private-repo
        run: |
          cd ios
          xcodebuild \
            -workspace LittleTalks.xcworkspace \
            -scheme LittleTalks \
            -configuration Debug \
            -sdk iphonesimulator \
            -derivedDataPath ./build \
            build
          cd ..

      - name: Install and Launch App
        working-directory: ./private-repo
        run: |
          APP=$(find ios/build -name "LittleTalks.app" | head -1)
          xcrun simctl install "$SIMULATOR_ID" "$APP"
          xcrun simctl launch "$SIMULATOR_ID" com.littletalks.app
          sleep 30

      - name: Run Maestro UI Tests
        working-directory: ./private-repo
        run: |
          UI_TEST_SUCCESS=true
          if command -v maestro &> /dev/null; then
            maestro test .maestro/signup-flow.yml || UI_TEST_SUCCESS=false
          else
            UI_TEST_SUCCESS=false
          fi
          echo "UI_TEST_SUCCESS=$UI_TEST_SUCCESS" >> $GITHUB_ENV

      - name: Set UI Test Results
        id: ui_test_results
        if: always()
        run: |
          END=$(date +%s)
          DUR=$((END - UI_TEST_START))
          if [[ "$UI_TEST_SUCCESS" == "true" ]]; then
            echo "status=✅ iOS UI Tests Passed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro completed in ${DUR}s" >> $GITHUB_OUTPUT
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "status=❌ iOS UI Tests Failed" >> $GITHUB_OUTPUT
            echo "details=iOS Maestro failed after ${DUR}s" >> $GITHUB_OUTPUT
            echo "passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup UI Tests
        if: always()
        run: |
          [ -f metro.pid ] && kill $(cat metro.pid) || true
          [ -n "$SIMULATOR_ID" ] && xcrun simctl shutdown $SIMULATOR_ID && xcrun simctl delete $SIMULATOR_ID

      - name: Upload UI Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ui-test-artifacts
          path: |
            metro.log
            ~/.maestro/tests/
            ~/.maestro/screenshots/

      - name: Check UI Test Failure
        if: needs.setup.outputs.fail_fast == 'true' && steps.ui_test_results.outputs.passed == 'false'
        run: exit 1

  android-ui-tests:
    runs-on: ${{ needs.setup.outputs.android_runner }}
    timeout-minutes: 40
    needs: [setup, unit-tests]
    if: needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_ui_tests == 'true' && (success() || needs.setup.outputs.fail_fast == 'false')
    outputs:
      ui_test_status: ${{ steps.ui_test_results.outputs.status }}
      ui_test_details: ${{ steps.ui_test_results.outputs.details }}
      ui_tests_passed: ${{ steps.ui_test_results.outputs.passed }}

    steps:
      - name: Start UI Test Timer
        run: echo "UI_TEST_START=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup.outputs.target_repo }}
          token: ${{ github.event.client_payload.secrets.TARGET_REPO_TOKEN || secrets.TARGET_REPO_TOKEN }}
          path: ./private-repo

      - name: Setup Node.js (buildjet)
        if: needs.setup.outputs.use_buildjet == 'true'
        uses: buildjet/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Setup Node.js (default)
        if: needs.setup.outputs.use_buildjet == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: './private-repo/yarn.lock'

      - name: Install Dependencies
        working-directory: ./private-repo
        run: yarn install --frozen-lockfile

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Setup Java (buildjet)
        if: needs.setup.outputs.use_buildjet == 'true'
        uses: buildjet/setup-java@v4
        with:
          java-version: 17
          distribution: adopt

      - name: Setup Java (default)
        if: needs.setup.outputs.use_buildjet == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: adopt

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Maestro
        run: |
          echo "📦 Installing Maestro..."
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          $HOME/.maestro/bin/maestro --version

      - name: Backup & enhance gradle.properties
        working-directory: ./private-repo
        run: |
          cp android/gradle.properties android/gradle.properties.backup || true
          echo "" >> android/gradle.properties
          cat >> android/gradle.properties << EOF
  org.gradle.jvmargs=-Xmx6144m -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
  org.gradle.daemon=true
  org.gradle.parallel=true
  org.gradle.configureondemand=true
  org.gradle.caching=true
  android.useAndroidX=true
  android.enableJetifier=true
  org.gradle.unsafe.configuration-cache=false
  EOF

- name: Cache Gradle Wrapper
  uses: ${{ needs.setup.outputs.use_buildjet == 'true' && 'buildjet/cache@v3' || 'actions/cache@v3' }}
  with:
    path: ~/.gradle/wrapper
    key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}

- name: Cache Gradle Caches
  uses: ${{ needs.setup.outputs.use_buildjet == 'true' && 'buildjet/cache@v3' || 'actions/cache@v3' }}
  with:
    path: ~/.gradle/caches
    key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
    restore-keys: |
      ${{ runner.os }}-gradle-caches-

- name: Gradle clean
  working-directory: ./private-repo/android
  run: ./gradlew clean

- name: Start Metro Bundler
  working-directory: ./private-repo
  run: |
    npx react-native start --reset-cache > metro.log 2>&1 &
    echo $! > metro.pid
    for i in {1..60}; do
      if curl -s http://localhost:8081/status | grep -q running; then break; fi
      sleep 2
    done
    sleep 15

- name: Build Debug APK
  working-directory: ./private-repo/android
  timeout-minutes: 15
  run: |
    ./gradlew assembleDebug --stacktrace
    APK="app/build/outputs/apk/debug/app-debug.apk"
    if [ ! -f "$APK" ]; then
      echo "❌ APK not found"
      exit 1
    fi

- name: Run Android Maestro UI Tests
  uses: reactivecircus/android-emulator-runner@v2
  timeout-minutes: 25
  with:
    api-level: 33
    target: google_apis
    arch: x86_64
    profile: Nexus 6
    force-avd-creation: false
    emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
    disable-animations: true
    working-directory: ./private-repo
    script: |
      adb install $APK
      maestro test .maestro/signup-flow.yml

- name: Set UI Test Results
  id: ui_test_results
  if: always()
  run: |
    END=$(date +%s)
    DUR=$((END - UI_TEST_START))
    if [[ "${{ job.status }}" == "success" ]]; then
      echo "status=✅ Android UI Tests Passed" >> $GITHUB_OUTPUT
      echo "details=Android Maestro completed in ${DUR}s" >> $GITHUB_OUTPUT
      echo "passed=true" >> $GITHUB_OUTPUT
    else
      echo "status=❌ Android UI Tests Failed" >> $GITHUB_OUTPUT
      echo "details=Android Maestro failed after ${DUR}s" >> $GITHUB_OUTPUT
      echo "passed=false" >> $GITHUB_OUTPUT
    fi

- name: Cleanup Android UI Tests
  if: always()
  working-directory: ./private-repo
  run: |
    [ -f metro.pid ] && kill $(cat metro.pid) || true

- name: Upload Android UI Test Artifacts
  if: always()
  uses: actions/upload-artifact@v4
  with:
    name: android-ui-test-artifacts
    path: |
      metro.log
      ~/.maestro/tests/
      ~/.maestro/screenshots/

- name: Check UI Test Failure
  if: failure() && needs.setup.outputs.fail_fast == 'true'
  run: exit 1

ios-build:
  runs-on: ${{ needs.setup.outputs.ios_runner }}
  needs: [setup, ios-ui-tests]
  if: needs.setup.outputs.build_ios == 'true' && needs.setup.outputs.run_build == 'true' && (needs.ios-ui-tests.outputs.passed == 'true' || needs.setup.outputs.fail_fast == 'false')
  env:
    IOS_DIR: ${{ github.workspace }}/private-repo/ios
    ARCHIVE_PATH: ${{ github.workspace }}/private-repo/ios/build/LittleTalks.xcarchive
    EXPORT_PATH: ${{ github.workspace }}/private-repo/ios/build/export
    MATCH_SSH_KEY_B64: ${{ github.event.client_payload.secrets.MATCH_SSH_KEY_B64 || '' }}
    MATCH_SSH_KEY_REPO: ${{ secrets.MATCH_SSH_KEY || '' }}
    MATCH_GIT_URL: ${{ github.event.client_payload.secrets.MATCH_GIT_URL || secrets.MATCH_GIT_URL }}
    MATCH_PASSWORD: ${{ github.event.client_payload.secrets.MATCH_PASSWORD || secrets.MATCH_PASSWORD }}
    APPLE_TEAM_ID: ${{ github.event.client_payload.secrets.APPLE_TEAM_ID || secrets.APPLE_TEAM_ID }}
    ASC_API_KEY_ID: ${{ github.event.client_payload.secrets.ASC_API_KEY_ID || secrets.ASC_API_KEY_ID }}
    ASC_API_KEY_P8_B64: ${{ github.event.client_payload.secrets.ASC_API_KEY_P8_B64 || '' }}
    ASC_API_KEY_P8_REPO: ${{ secrets.ASC_API_KEY_P8 || '' }}
    ASC_ISSUER_ID: ${{ github.event.client_payload.secrets.ASC_ISSUER_ID || secrets.ASC_ISSUER_ID }}
  steps:
    - name: Start Build Timer
      run: echo "BUILD_START=$(date +%s)" >> $GITHUB_ENV

    - name: Check Prerequisites for Store Distribution
      if: needs.setup.outputs.track == 'production'
      run: |
        UI_TESTS_PASSED="${{ needs.ios-ui-tests.outputs.passed }}"
        if [[ "$UI_TESTS_PASSED" != "true" ]]; then exit 1; fi

    - name: Checkout Private Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ needs.setup.outputs.target_repo }}
        token: ${{ github.event.client_payload.secrets.TARGET_REPO_TOKEN || secrets.TARGET_REPO_TOKEN }}
        path: ./private-repo

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        cache-dependency-path: './private-repo/yarn.lock'

    - name: Install Dependencies
      working-directory: ./private-repo
      run: yarn install --frozen-lockfile

    - name: Setup App Store Connect API Key
      working-directory: ./private-repo
      run: |
        mkdir -p ios/fastlane
        if [ -n "$ASC_API_KEY_P8_B64" ]; then
          KEY=$(echo "$ASC_API_KEY_P8_B64" | base64 -d)
        else
          KEY="$ASC_API_KEY_P8_REPO"
        fi
        cat > ios/fastlane/api_key.json <<EOF
  {
    "key_id": "$ASC_API_KEY_ID",
    "issuer_id": "$ASC_ISSUER_ID",
    "key": "$KEY",
    "duration": 1200,
    "in_house": false
  }
  EOF

- name: Get latest build number from App Store Connect
  working-directory: ./private-repo/ios
  env:
    FASTLANE_OPT_OUT_USAGE: "YES"
  run: |
    if fastlane run latest_testflight_build_number app_identifier:"com.littletalks.app" api_key_path:"fastlane/api_key.json" > /tmp/asc.txt 2>&1; then
      LATEST_ASC_BUILD=$(grep -o '^[0-9]\+' /tmp/asc.txt | tail -1)
    else
      LATEST_ASC_BUILD="0"
    fi
    echo "LATEST_ASC_BUILD=$LATEST_ASC_BUILD" >> $GITHUB_ENV

- name: Read and determine next iOS version
  working-directory: ./private-repo
  run: |
    PBX="ios/LittleTalks.xcodeproj/project.pbxproj"
    CURRENT_VERSION=$(grep -o "MARKETING_VERSION = [^;]*" $PBX | head -1 | sed 's/MARKETING_VERSION = //;s/;//')
    CURRENT_BUILD=$(grep -o "CURRENT_PROJECT_VERSION = [^;]*" $PBX | head -1 | sed 's/CURRENT_PROJECT_VERSION = //;s/;//')
    if [ "$LATEST_ASC_BUILD" -gt "$CURRENT_BUILD" ]; then NEXT_BUILD=$((LATEST_ASC_BUILD + 1)); else NEXT_BUILD=$((CURRENT_BUILD + 1)); fi
    IFS='.' read -ra V <<< "$CURRENT_VERSION"
    NEXT_VERSION="${V[0]}.${V[1]}.$((V[2]+1))"
    echo "NEXT_VERSION_NAME=$NEXT_VERSION" >> $GITHUB_ENV
    echo "NEXT_VERSION_CODE=$NEXT_BUILD" >> $GITHUB_ENV

- name: Update iOS version for build
  working-directory: ./private-repo
  run: |
    PBX="ios/LittleTalks.xcodeproj/project.pbxproj"
    sed -i.bak "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = ${{ env.NEXT_VERSION_NAME }}/" $PBX
    sed -i.bak "s/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = ${{ env.NEXT_VERSION_CODE }}/" $PBX

- name: Set up Ruby & CocoaPods/Fastlane
  run: |
    gem install cocoapods fastlane
    cd ios && pod install --clean-install --repo-update

- name: Create Match Keychain & SSH
  run: |
    security create-keychain -p "pass" ios-build.keychain
    security unlock-keychain -p "pass" ios-build.keychain
    mkdir -p ~/.ssh
    if [ -n "$MATCH_SSH_KEY_B64" ]; then
      echo "$MATCH_SSH_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    else
      echo "$MATCH_SSH_KEY_REPO" > ~/.ssh/id_rsa
    fi
    chmod 600 ~/.ssh/id_rsa
    ssh-keyscan github.com >> ~/.ssh/known_hosts

- name: Setup Match certificates
  working-directory: ./private-repo/ios
  run: |
    fastlane match appstore --git_url "$MATCH_GIT_URL" --app_identifier "com.littletalks.app" --team_id "$APPLE_TEAM_ID" --readonly true
    fastlane match appstore --git_url "$MATCH_GIT_URL" --app_identifier "com.littletalks.app.OneSignalNotificationServiceExt" --team_id "$APPLE_TEAM_ID" --readonly true

- name: Build & Archive
  working-directory: ./private-repo
  run: |
    xcodebuild clean archive \
      -workspace "$IOS_DIR/LittleTalks.xcworkspace" \
      -scheme LittleTalks \
      -configuration Release \
      -sdk iphoneos \
      -archivePath "$ARCHIVE_PATH" \
      CODE_SIGN_STYLE=Manual \
      DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
      ENABLE_BITCODE=NO
    xcodebuild -exportArchive \
      -archivePath "$ARCHIVE_PATH" \
      -exportOptionsPlist ios/exportOptions.plist \
      -exportPath "$EXPORT_PATH"

- name: Upload to TestFlight
  working-directory: ./private-repo/ios
  run: fastlane ios beta

android-build:
  runs-on: ${{ needs.setup.outputs.android_runner }}
  timeout-minutes: 30
  needs: [setup, android-ui-tests]
  if: needs.setup.outputs.build_android == 'true' && needs.setup.outputs.run_build == 'true' && (needs.android-ui-tests.outputs.passed == 'true' || needs.setup.outputs.fail_fast == 'false')
  env:
    ANDROID_DIR: ${{ github.workspace }}/private-repo/android
    GOOGLE_PLAY_JSON_B64: ${{ github.event.client_payload.secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_B64 || '' }}
    GOOGLE_PLAY_JSON_REPO: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON || '' }}
  steps:
    - name: Checkout Private Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ needs.setup.outputs.target_repo }}
        token: ${{ github.event.client_payload.secrets.TARGET_REPO_TOKEN || secrets.TARGET_REPO_TOKEN }}
        path: ./private-repo

    - name: Decode Google Play Credentials
      run: |
        if [ -n "$GOOGLE_PLAY_JSON_B64" ]; then
          echo "$GOOGLE_PLAY_JSON_B64" | base64 -d > /tmp/google-play-key.json
        else
          echo "$GOOGLE_PLAY_JSON_REPO" > /tmp/google-play-key.json
        fi

    - name: Get latest build number from Google Play Console
      run: |
        LATEST_GP=$(google-play get-latest-build-number \
          --package-name "com.littletalks.app" \
          --tracks "${{ needs.setup.outputs.track }}" \
          --credentials /tmp/google-play-key.json 2>/dev/null || echo 0)
        echo "LATEST_GOOGLE_PLAY_BUILD=$LATEST_GP" >> $GITHUB_ENV

    - name: Read and determine next Android version (FAULT TOLERANT)
      working-directory: ./private-repo/android/app
      run: |
        CURRENT_VERSION_NAME=$(grep versionName build.gradle | sed -E 's/.*"(.*)"/\1/')
        CURRENT_VERSION_CODE=$(grep "versionCode project.hasProperty" build.gradle | sed -E 's/.*: ([0-9]+).*/\1/')
        if [ "$LATEST_GOOGLE_PLAY_BUILD" -gt "$CURRENT_VERSION_CODE" ]; then
          NEXT_BUILD=$((LATEST_GOOGLE_PLAY_BUILD + 1))
          STRATEGY="Google Play Console + 1"
        else
          NEXT_BUILD=$((CURRENT_VERSION_CODE + 1))
          STRATEGY="Project File + 1"
        fi
        IFS='.' read -ra PARTS <<< "$CURRENT_VERSION_NAME"
        NEXT_VERSION_NAME="${PARTS[0]}.${PARTS[1]}.$((PARTS[2]+1))"
        echo "CURRENT_VERSION_NAME=$CURRENT_VERSION_NAME" >> $GITHUB_ENV
        echo "CURRENT_VERSION_CODE=$CURRENT_VERSION_CODE" >> $GITHUB_ENV
        echo "NEXT_VERSION_NAME=$NEXT_VERSION_NAME" >> $GITHUB_ENV
        echo "NEXT_VERSION_CODE=$NEXT_BUILD" >> $GITHUB_ENV

    - name: Update Android version for build (FAULT TOLERANT)
      working-directory: ./private-repo/android/app
      run: |
        sed -i "s/versionName \"$CURRENT_VERSION_NAME\"/versionName \"$NEXT_VERSION_NAME\"/" build.gradle
        sed -i "s/: $CURRENT_VERSION_CODE/: $NEXT_VERSION_CODE/" build.gradle

    - name: Build Release AAB
      working-directory: ./private-repo/android
      run: |
        ./gradlew bundleRelease \
          -PsigningKeystorePassword="$ANDROID_RELEASE_KEYSTORE_PASSWORD" \
          -PsigningKeyAlias="$ANDROID_RELEASE_KEY_ALIAS" \
          -PsigningKeyPassword="$ANDROID_RELEASE_KEY_PASSWORD" \
          -PlittleVersionCode=${{ env.NEXT_VERSION_CODE }} \
          --stacktrace

    - name: Upload to Google Play
      id: upload
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: /tmp/google-play-key.json
        packageName: com.littletalks.app
        releaseFiles: app/build/outputs/bundle/release/app-release.aab
        track: ${{ needs.setup.outputs.track }}
        status: ${{ needs.setup.outputs.track == 'production' && 'completed' || 'draft' }}

summary:
  runs-on: ubuntu-latest
  needs: [setup, unit-tests, ios-ui-tests, android-ui-tests, ios-build, android-build]
  if: always()
  steps:
    - name: LittlePipes Build Summary
      run: |
        echo "🚀 LittlePipes Build Complete!"
        echo "Target: ${{ needs.setup.outputs.target_repo }}"
        echo "Platforms: iOS(${{
  needs.setup.outputs.build_ios }}) Android(${{
  needs.setup.outputs.build_android }})"
echo "Results: Unit Tests=${{
  needs.unit-tests.result }} iOS UI=${{
  needs.ios-ui-tests.outputs.passed }} Android UI=${{
  needs.android-ui-tests.outputs.passed }}"
  echo "iOS Build=${{ needs.ios-build.result }} Android Build=${{ needs.android-build.result }}"
echo "👉 Monitor: https://github.com/${{ github.repository }}/actions"
