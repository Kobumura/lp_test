# App Store Connect Query (Fixed for OpenSSL Compatibility)
  app-store-query:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.build_ios == 'true'
    outputs:
      latest_build_number: ${{ steps.query.outputs.build_number }}
      query_success: ${{ steps.query.outputs.success }}
      query_method: ${{ steps.query.outputs.method }}
    steps:
      - name: Prepare App Store Connect Credentials
        env:
          ASC_API_KEY_ID: ${{ github.event.client_payload.secrets.ASC_API_KEY_ID || secrets.ASC_API_KEY_ID }}
          ASC_API_KEY_P8_B64: ${{ github.event.client_payload.secrets.ASC_API_KEY_P8_B64 || '' }}
          ASC_API_KEY_P8_REPO: ${{ secrets.ASC_API_KEY_P8 || '' }}
          ASC_ISSUER_ID: ${{ github.event.client_payload.secrets.ASC_ISSUER_ID || secrets.ASC_ISSUER_ID }}
        run: |
          echo "üîë Setting up App Store Connect credentials..."
          
          if [ -n "$ASC_API_KEY_P8_B64" ]; then
            echo "üîë Using App Store Connect key from repository dispatch (base64)"
            echo "$ASC_API_KEY_P8_B64" | base64 -d > /tmp/asc-api-key.p8
          elif [ -n "$ASC_API_KEY_P8_REPO" ]; then
            echo "üîë Using App Store Connect key from repository secrets (direct)"
            echo "$ASC_API_KEY_P8_REPO" > /tmp/asc-api-key.p8
          else
            echo "‚ùå No App Store Connect API key available"
            exit 1
          fi
          
          # Verify the P8 file is valid
          echo "üîç Validating P8 file..."
          if head -1 /tmp/asc-api-key.p8 | grep -q "BEGIN PRIVATE KEY"; then
            echo "‚úÖ P8 file appears valid"
          else
            echo "‚ùå P8 file is invalid or corrupted"
            exit 1
          fi
          
          # Set environment variables for Fastlane
          echo "ASC_API_KEY_ID=$ASC_API_KEY_ID" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=$ASC_ISSUER_ID" >> $GITHUB_ENV
          echo "ASC_API_KEY_PATH=/tmp/asc-api-key.p8" >> $GITHUB_ENV

      - name: Install Fastlane (OpenSSL Compatibility Mode)
        run: |
          echo "üì¶ Installing Fastlane with OpenSSL compatibility..."
          
          # Try multiple installation methods for better compatibility
          if gem install fastlane --no-document; then
            echo "‚úÖ Fastlane installed successfully"
          else
            echo "‚ö†Ô∏è Standard gem install failed, trying alternative..."
            sudo gem install fastlane --no-document
          fi
          
          # Verify installation
          echo "üîß Verifying Fastlane installation:"
          fastlane --version

      - name: Query App Store Connect (Multiple Methods)
        id: query
        run: |
          echo "üîç Querying App Store Connect for latest build number..."
          echo "üìã Bundle ID: ${{ github.event.client_payload.app_config.ios_bundle_id || secrets.IOS_BUNDLE_ID }}"
          
          BUNDLE_ID="${{ github.event.client_payload.app_config.ios_bundle_id || secrets.IOS_BUNDLE_ID }}"
          LATEST_BUILD="0"
          SUCCESS="false"
          METHOD="none"
          
          # Method 1: Try app_store_build_number (recommended by Google search)
          echo "üß™ METHOD 1: Using app_store_build_number (Google recommended)..."
          if RESULT=$(fastlane run app_store_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"$ASC_API_KEY_PATH" \
              key_id:"$ASC_API_KEY_ID" \
              issuer_id:"$ASC_ISSUER_ID" 2>&1); then
          
            echo "‚úÖ Method 1 succeeded:"
            echo "$RESULT"
          
            # Parse the successful result (look for "Result:" or any number)
            PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |App Store build number: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
            if [[ "$PARSED_BUILD" =~ ^[0-9]+$ ]] && [ "$PARSED_BUILD" -gt 0 ]; then
              LATEST_BUILD="$PARSED_BUILD"
              SUCCESS="true"
              METHOD="app_store_build_number"
            fi
          else
            echo "‚ùå Method 1 failed:"
            echo "$RESULT"
          fi
          
          # Method 2: Try latest_testflight_build_number (if Method 1 failed)
          if [ "$SUCCESS" = "false" ]; then
            echo "üß™ METHOD 2: Using latest_testflight_build_number (fallback)..."
            if RESULT=$(fastlane run latest_testflight_build_number \
                app_identifier:"$BUNDLE_ID" \
                api_key_path:"$ASC_API_KEY_PATH" \
                key_id:"$ASC_API_KEY_ID" \
                issuer_id:"$ASC_ISSUER_ID" 2>&1); then
            
              echo "‚úÖ Method 2 succeeded:"
              echo "$RESULT"
            
              # Parse with improved regex
              PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |build: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
              if [[ "$PARSED_BUILD" =~ ^[0-9]+$ ]] && [ "$PARSED_BUILD" -gt 0 ]; then
                LATEST_BUILD="$PARSED_BUILD"
                SUCCESS="true"
                METHOD="latest_testflight_build_number"
              fi
            else
              echo "‚ùå Method 2 failed:"
              echo "$RESULT"
            fi
          fi
          
          # Method 3: Try with username authentication (if API key methods fail)
          if [ "$SUCCESS" = "false" ]; then
            echo "üß™ METHOD 3: Attempting username-based query (last resort)..."
            echo "‚ö†Ô∏è This method may prompt for credentials and is not recommended for CI"
            # Skip this method for now in CI environment
            echo "Skipping username method in CI environment"
          fi
          
          # Final result
          echo "üìã Final App Store Connect Query Result:"
          echo "  Latest Build: $LATEST_BUILD"
          echo "  Success: $SUCCESS"
          echo "  Method Used: $METHOD"
          
          echo "build_number=$LATEST_BUILD" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "method=$METHOD" >> $GITHUB_OUTPUT
          
          # If all methods failed, warn but don't fail the job
          if [ "$SUCCESS" = "false" ]; then
            echo "‚ö†Ô∏è All App Store Connect query methods failed"
            echo "üì± iOS build will use fallback version logic"
          fi
