name: Test App Store Connect Query - All Versions

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: macos-15
    steps:
      - name: Setup App Store Connect API Key
        run: |
          echo "🔑 Setting up App Store Connect credentials..."
          
          # Create ios directory structure
          mkdir -p ios/fastlane
          
          # Create the API key JSON
          cat > ios/fastlane/api_key.json << 'EOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          EOF
          
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          echo "✅ API key setup complete"

      - name: Install Fastlane
        run: |
          echo "📦 Installing Fastlane..."
          gem install fastlane --no-document
          gem install fastlane-plugin-versioning --no-document
          echo "✅ Fastlane installed"
          fastlane --version

      - name: Query App Store Connect for ALL Build Numbers
        working-directory: ios
        run: |
          echo "🔍 Querying App Store Connect for ALL build numbers..."
          echo "📋 Bundle ID: $BUNDLE_ID"
          
          # Create comprehensive Fastfile that checks all versions
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Query all builds across all versions"
            lane :query_all_builds do
              puts "=== Comprehensive App Store Connect Query ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
          
              begin
                # Method 1: Get latest build for ANY version (what we're currently using)
                puts "\n--- Method 1: Latest build for any version ---"
                build_any = latest_testflight_build_number(
                  api_key_path: "fastlane/api_key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "Latest for ANY version: #{build_any}"
          
                # Method 2: Get highest build number across all versions
                puts "\n--- Method 2: Highest build across ALL versions ---"
                require 'spaceship'
          
                # Connect to App Store Connect
                api_key = Spaceship::ConnectAPI::Token.from_json_file("fastlane/api_key.json")
                Spaceship::ConnectAPI.token = api_key
          
                # Get the app
                app = Spaceship::ConnectAPI::App.find(ENV["BUNDLE_ID"])
                puts "Found app: #{app.name}"
          
                # Get all builds
                all_builds = app.get_builds(
                  includes: "preReleaseVersion",
                  limit: 200
                )
          
                puts "Total builds found: #{all_builds.count}"
          
                # Find the highest build number
                highest_build = 0
                build_versions = {}
          
                all_builds.each do |build|
                  build_number = build.version.to_i
                  version = build.pre_release_version&.version || "Unknown"
          
                  build_versions[version] ||= []
                  build_versions[version] << build_number
          
                  if build_number > highest_build
                    highest_build = build_number
                  end
                end
          
                puts "\nBuild numbers by version:"
                build_versions.each do |version, builds|
                  puts "  Version #{version}: #{builds.sort.reverse.first(5).join(', ')}#{builds.count > 5 ? '...' : ''}"
                end
          
                puts "\n✅ HIGHEST_BUILD_NUMBER:#{highest_build}"
          
                # Method 3: Check specific recent versions
                puts "\n--- Method 3: Check specific versions ---"
                ["1.5.15", "1.5.16", "1.5.17", "1.5.18", "1.5.19", "1.5.20"].each do |version|
                  begin
                    build = latest_testflight_build_number(
                      api_key_path: "fastlane/api_key.json",
                      app_identifier: ENV["BUNDLE_ID"],
                      version: version
                    )
                    puts "Version #{version}: build #{build}"
                  rescue => e
                    puts "Version #{version}: no builds or error"
                  end
                end
          
              rescue => e
                puts "ERROR: #{e.message}"
                puts "Backtrace: #{e.backtrace.first(5).join("\n")}"
              end
          
              puts "\n=== Query Complete ==="
            end
          
            # Alternative simpler lane
            desc "Simple highest build query"
            lane :simple_query do
              puts "=== Simple Build Number Query ==="
          
              # Try without specifying version (should get latest)
              build = latest_testflight_build_number(
                api_key_path: "fastlane/api_key.json",
                app_identifier: ENV["BUNDLE_ID"],
                initial_build_number: 0
              )
          
              puts "✅ SIMPLE_RESULT:#{build}"
            end
          end
          EOF
          
          echo "🚀 Running comprehensive query..."
          
          export FASTLANE_OPT_OUT_USAGE="YES"
          export FASTLANE_HIDE_CHANGELOG="true"
          
          # Run the comprehensive query
          if OUTPUT=$(fastlane query_all_builds 2>&1); then
            echo "✅ Comprehensive query completed"
          else
            echo "⚠️ Comprehensive query had issues"
          fi
          
          echo ""
          echo "📋 COMPREHENSIVE QUERY OUTPUT:"
          echo "=============================="
          echo "$OUTPUT"
          echo "=============================="
          echo ""
          
          # Parse for highest build
          if echo "$OUTPUT" | grep -q "HIGHEST_BUILD_NUMBER:"; then
            HIGHEST=$(echo "$OUTPUT" | grep "HIGHEST_BUILD_NUMBER:" | sed 's/.*HIGHEST_BUILD_NUMBER://' | tr -d ' ')
            echo "🎯 HIGHEST BUILD NUMBER FOUND: $HIGHEST"
          else
            echo "❌ Could not determine highest build number"
          
            # Try simple query as fallback
            echo ""
            echo "🔄 Trying simple query as fallback..."
            if SIMPLE_OUTPUT=$(fastlane simple_query 2>&1); then
              echo "$SIMPLE_OUTPUT"
              if echo "$SIMPLE_OUTPUT" | grep -q "SIMPLE_RESULT:"; then
                SIMPLE=$(echo "$SIMPLE_OUTPUT" | grep "SIMPLE_RESULT:" | sed 's/.*SIMPLE_RESULT://' | tr -d ' ')
                echo "🎯 Simple query result: $SIMPLE"
              fi
            fi
          fi

      - name: Summary and Recommendations
        if: always()
        run: |
          echo ""
          echo "📊 SUMMARY"
          echo "=========="
          echo "Based on the test results, here's what we learned:"
          echo ""
          echo "1. The current implementation only checks version 1.5.15"
          echo "2. You need to query ALL versions to find the absolute highest build"
          echo "3. The build number 1 is likely for version 1.5.15 specifically"
          echo ""
          echo "🔧 RECOMMENDED FIX:"
          echo "Use the Spaceship API directly to query all builds across all versions"
          echo "This ensures you get the absolute highest build number, not just for one version"