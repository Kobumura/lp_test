name: Test App Store Connect Query (Fixed Env Vars)

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: ubuntu-latest
    steps:
      - name: Setup App Store Connect API Key (Fixed Env Handling)
        run: |
          echo "üîë Setting up App Store Connect credentials..."
          
          # Create JSON file with properly escaped key
          cat > /tmp/asc-api-key.json << 'EOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          EOF
          
          # Create P8 file  
          cat > /tmp/asc-api-key.p8 << 'EOF'
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY
          k6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz
          oeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj
          hrCw4w+O
          -----END PRIVATE KEY-----
          EOF
          
          # Set only simple environment variables (no multi-line)
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          echo "ASC_API_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          
          # Set Fastlane auto-pickup environment variables (using base64 to avoid newlines)
          echo "APP_STORE_CONNECT_API_KEY_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          
          # Base64 encode the key to avoid newline issues
          KEY_BASE64=$(base64 -w 0 /tmp/asc-api-key.p8)
          echo "ASC_KEY_BASE64=$KEY_BASE64" >> $GITHUB_ENV
          
          echo "‚úÖ API key setup complete"

      - name: Install Fastlane
        run: |
          echo "üì¶ Installing Fastlane..."
          sudo gem install fastlane --no-document
          echo "‚úÖ Fastlane installed"
          fastlane --version

      - name: Test App Store Connect Methods (Fixed)
        run: |
          echo "üîç Testing App Store Connect methods..."
          
          # Create Fastfile with proper approaches
          cat > Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Test App Store Connect methods"
            lane :test_methods do
              puts "=== Testing App Store Connect Methods ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
              
              # Method 1: JSON file (most reliable)
              puts "\n=== METHOD 1: JSON File ==="
              begin
                build_num = app_store_build_number(
                  api_key_path: "/tmp/asc-api-key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "JSON_SUCCESS:#{build_num}"
              rescue => e
                puts "JSON_ERROR:#{e.message}"
              end
              
              # Method 2: Create API key from base64
              puts "\n=== METHOD 2: Base64 Key ==="
              begin
                require 'base64'
                key_content = Base64.decode64(ENV["ASC_KEY_BASE64"])
                
                api_key = app_store_connect_api_key(
                  key_id: ENV["ASC_API_KEY_ID"],
                  issuer_id: ENV["ASC_ISSUER_ID"],
                  key: key_content,
                  duration: 1200,
                  in_house: false
                )
                
                build_num = app_store_build_number(
                  api_key: api_key,
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "BASE64_SUCCESS:#{build_num}"
              rescue => e
                puts "BASE64_ERROR:#{e.message}"
              end
              
              # Method 3: TestFlight with JSON
              puts "\n=== METHOD 3: TestFlight JSON ==="
              begin
                build_num = latest_testflight_build_number(
                  api_key_path: "/tmp/asc-api-key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "TESTFLIGHT_SUCCESS:#{build_num}"
              rescue => e
                puts "TESTFLIGHT_ERROR:#{e.message}"
              end
              
              # Method 4: TestFlight with base64 key
              puts "\n=== METHOD 4: TestFlight Base64 ==="
              begin
                require 'base64'
                key_content = Base64.decode64(ENV["ASC_KEY_BASE64"])
                
                api_key = app_store_connect_api_key(
                  key_id: ENV["ASC_API_KEY_ID"],
                  issuer_id: ENV["ASC_ISSUER_ID"],
                  key: key_content,
                  duration: 1200,
                  in_house: false
                )
                
                build_num = latest_testflight_build_number(
                  api_key: api_key,
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "TESTFLIGHT_BASE64_SUCCESS:#{build_num}"
              rescue => e
                puts "TESTFLIGHT_BASE64_ERROR:#{e.message}"
              end
              
              puts "=== All Methods Tested ==="
            end
          end
          EOF
          
          echo "üöÄ Running method tests..."
          
          if OUTPUT=$(fastlane test_methods 2>&1); then
            echo "‚úÖ Fastlane completed"
          else
            echo "‚ö†Ô∏è Fastlane had issues but continuing..."
          fi
          
          echo ""
          echo "üìã FASTLANE OUTPUT:"
          echo "=================="
          echo "$OUTPUT"
          echo "=================="
          echo ""
          
          # Parse results
          SUCCESS_COUNT=0
          WORKING_METHODS=()
          
          for method in "JSON" "BASE64" "TESTFLIGHT" "TESTFLIGHT_BASE64"; do
            if echo "$OUTPUT" | grep -q "${method}_SUCCESS:"; then
              BUILD_NUM=$(echo "$OUTPUT" | grep "${method}_SUCCESS:" | sed "s/.*${method}_SUCCESS://" | tr -d ' ' | head -1)
              if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
                echo "üéØ $method SUCCESS: Build $BUILD_NUM"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                WORKING_METHODS+=("$method")
              fi
            elif echo "$OUTPUT" | grep -q "${method}_ERROR:"; then
              ERROR_MSG=$(echo "$OUTPUT" | grep "${method}_ERROR:" | sed "s/.*${method}_ERROR://" | head -1)
              echo "‚ùå $method ERROR: $ERROR_MSG"
            fi
          done
          
          echo ""
          echo "üéØ FINAL RESULTS"
          echo "==============="
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "‚úÖ LP-21 RESOLVED: $SUCCESS_COUNT method(s) working!"
            echo "‚úÖ Working methods: ${WORKING_METHODS[*]}"
            echo "‚úÖ Can implement in main workflow using working method"
          else
            echo "‚ùå LP-21 PERSISTENT ISSUE: All methods failed"
            echo "‚ùå May need to investigate App Store Connect access or API key permissions"
          fi

      - name: Validate Setup
        if: always()
        run: |
          echo ""
          echo "üîç SETUP VALIDATION"
          echo "==================="
          
          echo "Files created:"
          ls -la /tmp/asc-api-key.*
          
          echo ""
          echo "JSON validation:"
          if python3 -c "import json; json.load(open('/tmp/asc-api-key.json'))" 2>/dev/null; then
            echo "‚úÖ JSON file is valid"
          else
            echo "‚ùå JSON file is invalid"
          fi
          
          echo ""
          echo "P8 validation:"
          if openssl pkey -in /tmp/asc-api-key.p8 -noout 2>/dev/null; then
            echo "‚úÖ P8 file is valid"
          else
            echo "‚ùå P8 file is invalid"
          fi
          
          echo ""
          echo "Environment variables (count):"
          env | grep -c "ASC_\|APP_STORE_" || echo "No ASC env vars found"
