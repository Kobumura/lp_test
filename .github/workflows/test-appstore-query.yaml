name: Debug App Store Connect API

on:
  workflow_dispatch:
    inputs:
      bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'
      test_method:
        description: 'Test method to use'
        type: choice
        options: [all, app_store_build_number, latest_testflight_build_number]
        default: 'all'

jobs:
  debug-app-store-api:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare App Store Connect Credentials
        env:
          ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
        run: |
          echo "üîë Setting up App Store Connect credentials..."
          
          if [ -z "$ASC_API_KEY_P8" ]; then
            echo "‚ùå ASC_API_KEY_P8 secret not found"
            exit 1
          fi
          
          echo "$ASC_API_KEY_P8" > /tmp/asc-api-key.p8
          
          # Verify the P8 file is valid
          echo "üîç Validating P8 file..."
          if head -1 /tmp/asc-api-key.p8 | grep -q "BEGIN PRIVATE KEY"; then
            echo "‚úÖ P8 file appears valid"
          else
            echo "‚ùå P8 file is invalid or corrupted"
            head -3 /tmp/asc-api-key.p8
            exit 1
          fi
          
          echo "ASC_API_KEY_ID=$ASC_API_KEY_ID" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=$ASC_ISSUER_ID" >> $GITHUB_ENV
          echo "ASC_API_KEY_PATH=/tmp/asc-api-key.p8" >> $GITHUB_ENV

      - name: Install Fastlane (Multiple Methods)
        run: |
          echo "üì¶ Installing Fastlane with OpenSSL compatibility..."
          
          # Method 1: Standard gem install
          if gem install fastlane --no-document; then
            echo "‚úÖ Fastlane installed successfully via gem"
          else
            echo "‚ö†Ô∏è Standard gem install failed, trying sudo..."
            sudo gem install fastlane --no-document
          fi
          
          # Verify installation
          echo "üîß Verifying Fastlane installation:"
          fastlane --version
          
          # Check Ruby and OpenSSL versions
          echo "üîç Environment info:"
          echo "Ruby: $(ruby --version)"
          echo "OpenSSL: $(openssl version)"

      - name: Test App Store Connect API (Multiple Methods)
        run: |
          echo "üîç Testing App Store Connect API..."
          echo "üìã Bundle ID: ${{ inputs.bundle_id }}"
          echo "üìã Test Method: ${{ inputs.test_method }}"
          
          BUNDLE_ID="${{ inputs.bundle_id }}"
          TEST_METHOD="${{ inputs.test_method }}"
          
          # Test Method 1: app_store_build_number
          if [[ "$TEST_METHOD" == "all" || "$TEST_METHOD" == "app_store_build_number" ]]; then
            echo ""
            echo "üß™ TEST 1: app_store_build_number (Google recommended)"
            echo "=========================================="
            
            if RESULT=$(fastlane run app_store_build_number \
                app_identifier:"$BUNDLE_ID" \
                api_key_path:"$ASC_API_KEY_PATH" \
                key_id:"$ASC_API_KEY_ID" \
                issuer_id:"$ASC_ISSUER_ID" 2>&1); then
            
              echo "‚úÖ app_store_build_number succeeded:"
              echo "$RESULT"
              echo ""
              echo "üîç Parsing result..."
              PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |App Store build number: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
              echo "Extracted build number: $PARSED_BUILD"
              
            else
              echo "‚ùå app_store_build_number failed:"
              echo "$RESULT"
            fi
          fi
          
          # Test Method 2: latest_testflight_build_number
          if [[ "$TEST_METHOD" == "all" || "$TEST_METHOD" == "latest_testflight_build_number" ]]; then
            echo ""
            echo "üß™ TEST 2: latest_testflight_build_number (fallback)"
            echo "============================================="
            
            if RESULT=$(fastlane run latest_testflight_build_number \
                app_identifier:"$BUNDLE_ID" \
                api_key_path:"$ASC_API_KEY_PATH" \
                key_id:"$ASC_API_KEY_ID" \
                issuer_id:"$ASC_ISSUER_ID" 2>&1); then
            
              echo "‚úÖ latest_testflight_build_number succeeded:"
              echo "$RESULT"
              echo ""
              echo "üîç Parsing result..."
              PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |build: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
              echo "Extracted build number: $PARSED_BUILD"
              
            else
              echo "‚ùå latest_testflight_build_number failed:"
              echo "$RESULT"
            fi
          fi
          
          echo ""
          echo "üîç SUMMARY"
          echo "=========="
          echo "If both methods failed with 'invalid curve name', the issue is OpenSSL compatibility."
          echo "If one method succeeded, use that method in the main workflow."
          echo "If parsing shows '0' despite success, the regex needs adjustment."

      - name: Test Alternative API Key Format
        if: always()
        run: |
          echo ""
          echo "üß™ TEST 3: Alternative API Key Setup"
          echo "===================================="
          
          # Try creating API key JSON format
          cat > /tmp/api_key.json <<EOF
          {
            "key_id": "$ASC_API_KEY_ID",
            "issuer_id": "$ASC_ISSUER_ID",
            "key_filepath": "/tmp/asc-api-key.p8"
          }
          EOF
          
          echo "Created JSON API key configuration"
          echo "This can be used as alternative if direct parameters fail"

      - name: OpenSSL Debugging
        if: always()
        run: |
          echo ""
          echo "üîç OPENSSL DEBUGGING"
          echo "==================="
          
          # Check OpenSSL curves
          echo "Available elliptic curves:"
          openssl ecparam -list_curves | head -10
          
          # Check if P8 file can be read by OpenSSL
          echo ""
          echo "Testing P8 file with OpenSSL:"
          if openssl pkey -in /tmp/asc-api-key.p8 -noout 2>&1; then
            echo "‚úÖ P8 file is valid for OpenSSL"
          else
            echo "‚ùå P8 file has OpenSSL compatibility issues"
          fi
          
          echo ""
          echo "üéØ NEXT STEPS:"
          echo "1. If both Fastlane methods failed with 'invalid curve name' ‚Üí OpenSSL issue confirmed"
          echo "2. Try updating Fastlane version in main workflow"
          echo "3. Consider using xcrun altool as alternative (deprecated but may work)"
          echo "4. Check if App Store Connect API key was generated correctly"
