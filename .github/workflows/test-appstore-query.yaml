name: Test App Store Connect Query

on:
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level'
        type: choice
        options: [basic, verbose]
        default: 'verbose'

jobs:
  test-appstore-query:
    runs-on: ubuntu-latest
    steps:
      - name: Test App Store Connect Query
        env:
          # Hardcoded for testing
          BUNDLE_ID: "com.littletalks.app"
          API_KEY_ID: "${{ secrets.ASC_API_KEY_ID }}"
          ISSUER_ID: "${{ secrets.ASC_ISSUER_ID }}"
          API_KEY_P8: "${{ secrets.ASC_API_KEY_P8 }}"
        run: |
          echo "üîç App Store Connect Query Test"
          echo "================================"
          
          echo "üìã Testing with:"
          echo "  Bundle ID: $BUNDLE_ID"
          echo "  Key ID: $API_KEY_ID"
          echo "  Issuer ID: $ISSUER_ID"
          echo "  Key length: ${#API_KEY_P8} characters"
          echo ""
          
          # Install Fastlane
          echo "üì¶ Installing Fastlane..."
          sudo gem install fastlane
          echo "‚úÖ Fastlane installed"
          fastlane --version
          echo ""
          
          # Create API key file
          echo "üîë Creating API key file..."
          mkdir -p ./fastlane
          jq -n \
            --arg key_id "$API_KEY_ID" \
            --arg issuer_id "$ISSUER_ID" \
            --arg key "$API_KEY_P8" \
            '{
              "key_id": $key_id,
              "issuer_id": $issuer_id,
              "key": $key,
              "duration": 1200,
              "in_house": false
            }' > ./fastlane/api_key.json
          
          echo "‚úÖ API key file created ($(wc -c < ./fastlane/api_key.json) bytes)"
          echo ""
          
          # Test 1: Latest TestFlight build
          echo "üß™ TEST 1: Latest TestFlight Build"
          echo "-----------------------------------"
          export FASTLANE_OPT_OUT_USAGE=YES
          
          if fastlane run latest_testflight_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"./fastlane/api_key.json" > /tmp/testflight.txt 2>&1; then
            
            echo "‚úÖ TestFlight query succeeded:"
            cat /tmp/testflight.txt
            echo ""
            
            TESTFLIGHT_BUILD=$(grep -E "(Result: |build: )" /tmp/testflight.txt | grep -o '[0-9]\+' | tail -1)
            echo "üìä Parsed TestFlight build: '$TESTFLIGHT_BUILD'"
            
            # Show what we're parsing
            echo "üîç Lines that match our pattern:"
            grep -E "(Result: |build: )" /tmp/testflight.txt || echo "No matches found"
            
          else
            echo "‚ùå TestFlight query failed:"
            cat /tmp/testflight.txt
            TESTFLIGHT_BUILD="0"
          fi
          
          echo ""
          
          # Test 2: App Store build number  
          echo "üß™ TEST 2: App Store Build Number"
          echo "----------------------------------"
          if fastlane run app_store_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"./fastlane/api_key.json" > /tmp/appstore.txt 2>&1; then
            
            echo "‚úÖ App Store query succeeded:"
            cat /tmp/appstore.txt
            echo ""
            
            APPSTORE_BUILD=$(grep -E "(Result: |build: |Build: )" /tmp/appstore.txt | grep -o '[0-9]\+' | tail -1)
            echo "üìä Parsed App Store build: '$APPSTORE_BUILD'"
            
            # Show what we're parsing
            echo "üîç Lines that match our pattern:"
            grep -E "(Result: |build: |Build: )" /tmp/appstore.txt || echo "No matches found"
            
          else
            echo "‚ùå App Store query failed:"
            cat /tmp/appstore.txt
            APPSTORE_BUILD="0"
          fi
          
          echo ""
          
          # Test 3: Try to list all builds
          echo "üß™ TEST 3: List All Builds (if available)"
          echo "------------------------------------------"
          if fastlane run download_dsyms \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"./fastlane/api_key.json" \
              output_directory:"/tmp" > /tmp/builds.txt 2>&1; then
            
            echo "‚úÖ Build listing succeeded:"
            cat /tmp/builds.txt
          else
            echo "‚ö†Ô∏è Build listing failed (this is expected):"
            head -20 /tmp/builds.txt
          fi
          
          echo ""
          
          # Summary and recommendations
          echo "üìã SUMMARY & ANALYSIS"
          echo "====================="
          echo "TestFlight Build: '$TESTFLIGHT_BUILD'"
          echo "App Store Build: '$APPSTORE_BUILD'"
          
          # Determine highest
          HIGHEST_BUILD=0
          SOURCE="none"
          
          if [[ "$TESTFLIGHT_BUILD" =~ ^[0-9]+$ ]] && [ "$TESTFLIGHT_BUILD" -gt "$HIGHEST_BUILD" ]; then
            HIGHEST_BUILD="$TESTFLIGHT_BUILD"
            SOURCE="TestFlight"
          fi
          
          if [[ "$APPSTORE_BUILD" =~ ^[0-9]+$ ]] && [ "$APPSTORE_BUILD" -gt "$HIGHEST_BUILD" ]; then
            HIGHEST_BUILD="$APPSTORE_BUILD"
            SOURCE="App Store"
          fi
          
          echo ""
          echo "üéØ RESULTS:"
          echo "  Highest Build Found: $HIGHEST_BUILD (from $SOURCE)"
          
          if [ "$HIGHEST_BUILD" -gt 0 ]; then
            NEXT_BUILD=$((HIGHEST_BUILD + 1))
            echo "  Next Build Should Be: $NEXT_BUILD"
            
            # Check if this seems reasonable
            if [ "$HIGHEST_BUILD" -lt 10 ]; then
              echo ""
              echo "‚ö†Ô∏è  WARNING: Build number seems very low!"
              echo "   This might indicate the query isn't finding all builds."
              echo "   Consider adding a safety buffer (e.g., use $((HIGHEST_BUILD + 50)))"
            fi
          else
            echo "  ‚ùå No valid build numbers found!"
            echo "     Fallback recommendation: Use 100 as safe starting point"
          fi
          
          echo ""
          echo "üí° RECOMMENDATIONS:"
          if [ "$HIGHEST_BUILD" -lt 10 ] && [ "$HIGHEST_BUILD" -gt 0 ]; then
            echo "  - Add safety buffer: next build = $((HIGHEST_BUILD + 50))"
            echo "  - This avoids conflicts with 'reserved' build numbers"
          elif [ "$HIGHEST_BUILD" -gt 0 ]; then
            echo "  - Use store-first approach: next build = $NEXT_BUILD"
            echo "  - This should avoid version conflicts"
          else
            echo "  - Fallback to safe number: use 100 as starting point"
            echo "  - Debug API key permissions and bundle ID"
          fi
          
          echo ""
          echo "üßπ Cleaning up..."
          rm -rf ./fastlane
          rm -f /tmp/testflight.txt /tmp/appstore.txt /tmp/builds.txt
          
          echo "‚úÖ Test complete!"
