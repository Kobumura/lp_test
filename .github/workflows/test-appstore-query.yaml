name: Test App Store Connect Query (Robust Version)

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: ubuntu-latest
    steps:
      - name: Setup App Store Connect API Key (Direct)
        run: |
          echo "üîë Setting up App Store Connect credentials directly..."
          
          # Create the P8 key file directly (using your provided key)
          cat > /tmp/asc-api-key.p8 << 'EOF'
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY
          k6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz
          oeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj
          hrCw4w+O
          -----END PRIVATE KEY-----
          EOF
          
          # Set environment variables
          echo "ASC_API_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          
          echo "‚úÖ API key setup complete"
          echo "üìã Bundle ID: ${{ inputs.ios_bundle_id }}"

      - name: Install Fastlane
        run: |
          echo "üì¶ Installing Fastlane..."
          sudo gem install fastlane --no-document
          echo "‚úÖ Fastlane installed"
          fastlane --version

      - name: Test App Store Connect Query (Robust Implementation)
        run: |
          echo "üîç Testing App Store Connect query with robust implementation..."
          
          # Create Fastfile with improved error handling
          cat > Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Query App Store Connect with robust error handling"
            lane :query_app_store do
              puts "=== Starting App Store Connect Query ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
              puts "API Key ID: #{ENV['ASC_API_KEY_ID']}"
              puts "Issuer ID: #{ENV['ASC_ISSUER_ID']}"
              
              begin
                # Create API key object
                puts "Creating API key object..."
                api_key = app_store_connect_api_key(
                  key_id: ENV["ASC_API_KEY_ID"],
                  issuer_id: ENV["ASC_ISSUER_ID"], 
                  key_filepath: "/tmp/asc-api-key.p8",
                  duration: 1200,
                  in_house: false
                )
                puts "‚úÖ API key object created successfully"
                
                # Method 1: app_store_build_number
                puts "\n=== Testing app_store_build_number ==="
                begin
                  build_num = app_store_build_number(
                    api_key: api_key,
                    app_identifier: ENV["BUNDLE_ID"]
                  )
                  puts "SUCCESS_app_store_build_number:#{build_num}"
                rescue => e
                  puts "ERROR_app_store_build_number:#{e.message}"
                end
                
                # Method 2: latest_testflight_build_number  
                puts "\n=== Testing latest_testflight_build_number ==="
                begin
                  build_num = latest_testflight_build_number(
                    api_key: api_key,
                    app_identifier: ENV["BUNDLE_ID"]
                  )
                  puts "SUCCESS_latest_testflight_build_number:#{build_num}"
                rescue => e
                  puts "ERROR_latest_testflight_build_number:#{e.message}"
                end
                
              rescue => e
                puts "FATAL_ERROR:#{e.message}"
                puts "Backtrace: #{e.backtrace.first(5).join('\n')}"
              end
              
              puts "=== App Store Connect Query Complete ==="
            end
          end
          EOF
          
          echo "üöÄ Running Fastlane query..."
          
          # Run Fastlane and capture all output
          if OUTPUT=$(fastlane query_app_store 2>&1); then
            echo "‚úÖ Fastlane completed"
          else
            echo "‚ö†Ô∏è Fastlane had issues but continuing..."
          fi
          
          echo ""
          echo "üìã FULL FASTLANE OUTPUT:"
          echo "========================"
          echo "$OUTPUT"
          echo "========================"
          echo ""
          
          # Parse results with improved logic
          SUCCESS_COUNT=0
          
          # Check app_store_build_number
          if echo "$OUTPUT" | grep -q "SUCCESS_app_store_build_number:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "SUCCESS_app_store_build_number:" | sed 's/.*SUCCESS_app_store_build_number://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
              echo "üéØ app_store_build_number SUCCESS: Found build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          elif echo "$OUTPUT" | grep -q "ERROR_app_store_build_number:"; then
            ERROR_MSG=$(echo "$OUTPUT" | grep "ERROR_app_store_build_number:" | sed 's/.*ERROR_app_store_build_number://')
            echo "‚ùå app_store_build_number ERROR: $ERROR_MSG"
          fi
          
          # Check latest_testflight_build_number
          if echo "$OUTPUT" | grep -q "SUCCESS_latest_testflight_build_number:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "SUCCESS_latest_testflight_build_number:" | sed 's/.*SUCCESS_latest_testflight_build_number://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
              echo "üéØ latest_testflight_build_number SUCCESS: Found build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
          elif echo "$OUTPUT" | grep -q "ERROR_latest_testflight_build_number:"; then
            ERROR_MSG=$(echo "$OUTPUT" | grep "ERROR_latest_testflight_build_number:" | sed 's/.*ERROR_latest_testflight_build_number://')
            echo "‚ùå latest_testflight_build_number ERROR: $ERROR_MSG"
          fi
          
          # Check for fatal errors
          if echo "$OUTPUT" | grep -q "FATAL_ERROR:"; then
            FATAL_MSG=$(echo "$OUTPUT" | grep "FATAL_ERROR:" | sed 's/.*FATAL_ERROR://')
            echo "üí• FATAL ERROR: $FATAL_MSG"
          fi
          
          echo ""
          echo "üéØ FINAL TEST RESULTS"
          echo "===================="
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "‚úÖ LP-21 RESOLVED: $SUCCESS_COUNT method(s) working!"
            echo "‚úÖ Fastlane parameter usage is correct"
            echo "‚úÖ Ready to implement in main workflow"
          else
            echo "‚ùå LP-21 ISSUE: No methods succeeded"
            echo "‚ùå Need further investigation"
          fi

      - name: Additional Diagnostics
        if: always()
        run: |
          echo ""
          echo "üîç ADDITIONAL DIAGNOSTICS"
          echo "========================="
          
          echo "Ruby version: $(ruby --version)"
          echo "Gem version: $(gem --version)"
          echo "OpenSSL version: $(openssl version)"
          
          echo ""
          echo "P8 file validation:"
          if openssl pkey -in /tmp/asc-api-key.p8 -noout 2>/dev/null; then
            echo "‚úÖ P8 file is valid for OpenSSL"
          else
            echo "‚ùå P8 file has OpenSSL issues"
          fi
          
          echo ""
          echo "Fastlane gems:"
          gem list | grep -E "(fastlane|spaceship)" || echo "No fastlane gems found"
