name: Test App Store Connect Query (Corrected API Key Usage)

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: ubuntu-latest
    steps:
      - name: Setup App Store Connect API Key (Corrected Method)
        run: |
          echo "üîë Setting up App Store Connect credentials with correct parameters..."
          
          # Method 1: Create JSON file (correct format based on GitHub issues)
          cat > /tmp/asc-api-key.json << 'EOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          EOF
          
          # Method 2: Also create P8 file for alternative approach
          cat > /tmp/asc-api-key.p8 << 'EOF'
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY
          k6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz
          oeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj
          hrCw4w+O
          -----END PRIVATE KEY-----
          EOF
          
          # Set environment variables for different approaches
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          echo "ASC_API_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          
          # Environment variables that Fastlane automatically picks up
          echo "APP_STORE_CONNECT_API_KEY_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_KEY=$(cat /tmp/asc-api-key.p8)" >> $GITHUB_ENV
          
          echo "‚úÖ API key setup complete with multiple methods"

      - name: Install Fastlane
        run: |
          echo "üì¶ Installing Fastlane..."
          sudo gem install fastlane --no-document
          echo "‚úÖ Fastlane installed"
          fastlane --version

      - name: Test Multiple API Key Approaches
        run: |
          echo "üîç Testing different API key approaches..."
          
          # Create Fastfile with multiple approaches
          cat > Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Test multiple API key approaches"
            lane :test_approaches do
              puts "=== Testing Multiple API Key Approaches ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
              
              # Approach 1: JSON file path
              puts "\n=== APPROACH 1: JSON File Path ==="
              begin
                build_num = app_store_build_number(
                  api_key_path: "/tmp/asc-api-key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "JSON_PATH_SUCCESS:#{build_num}"
              rescue => e
                puts "JSON_PATH_ERROR:#{e.message}"
              end
              
              # Approach 2: Environment variables (auto-pickup)
              puts "\n=== APPROACH 2: Environment Variables (Auto-pickup) ==="
              begin
                build_num = app_store_build_number(
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "ENV_AUTO_SUCCESS:#{build_num}"
              rescue => e
                puts "ENV_AUTO_ERROR:#{e.message}"
              end
              
              # Approach 3: Explicit API key creation with key content
              puts "\n=== APPROACH 3: Explicit API Key with Key Content ==="
              begin
                api_key = app_store_connect_api_key(
                  key_id: ENV["ASC_API_KEY_ID"],
                  issuer_id: ENV["ASC_ISSUER_ID"],
                  key: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
                  duration: 1200,
                  in_house: false
                )
                build_num = app_store_build_number(
                  api_key: api_key,
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "EXPLICIT_KEY_SUCCESS:#{build_num}"
              rescue => e
                puts "EXPLICIT_KEY_ERROR:#{e.message}"
              end
              
              # Approach 4: TestFlight with JSON file
              puts "\n=== APPROACH 4: TestFlight with JSON File ==="
              begin
                build_num = latest_testflight_build_number(
                  api_key_path: "/tmp/asc-api-key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "TESTFLIGHT_JSON_SUCCESS:#{build_num}"
              rescue => e
                puts "TESTFLIGHT_JSON_ERROR:#{e.message}"
              end
              
              puts "=== All API Key Approaches Tested ==="
            end
          end
          EOF
          
          echo "üöÄ Running comprehensive API key tests..."
          
          # Run Fastlane and capture all output
          if OUTPUT=$(fastlane test_approaches 2>&1); then
            echo "‚úÖ Fastlane completed"
          else
            echo "‚ö†Ô∏è Fastlane had issues but continuing..."
          fi
          
          echo ""
          echo "üìã FULL FASTLANE OUTPUT:"
          echo "========================"
          echo "$OUTPUT"
          echo "========================"
          echo ""
          
          # Parse results for each approach
          SUCCESS_COUNT=0
          WORKING_METHODS=()
          
          # Check each approach
          for approach in "JSON_PATH" "ENV_AUTO" "EXPLICIT_KEY" "TESTFLIGHT_JSON"; do
            if echo "$OUTPUT" | grep -q "${approach}_SUCCESS:"; then
              BUILD_NUM=$(echo "$OUTPUT" | grep "${approach}_SUCCESS:" | sed "s/.*${approach}_SUCCESS://" | tr -d ' ')
              if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
                echo "üéØ $approach SUCCESS: Found build $BUILD_NUM"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                WORKING_METHODS+=("$approach")
              fi
            elif echo "$OUTPUT" | grep -q "${approach}_ERROR:"; then
              ERROR_MSG=$(echo "$OUTPUT" | grep "${approach}_ERROR:" | sed "s/.*${approach}_ERROR://" | head -1)
              echo "‚ùå $approach ERROR: $ERROR_MSG"
            fi
          done
          
          echo ""
          echo "üéØ COMPREHENSIVE TEST RESULTS"
          echo "============================="
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "‚úÖ LP-21 RESOLVED: $SUCCESS_COUNT approach(es) working!"
            echo "‚úÖ Working methods: ${WORKING_METHODS[*]}"
            echo "‚úÖ Ready to implement in main workflow"
          else
            echo "‚ùå LP-21 ISSUE: All approaches failed"
            echo "‚ùå This suggests a deeper authentication or API issue"
          fi

      - name: Debug App Store Connect Access
        if: always()
        run: |
          echo ""
          echo "üîç APP STORE CONNECT ACCESS DEBUG"
          echo "================================="
          
          echo "JSON file validation:"
          if python3 -c "import json; json.load(open('/tmp/asc-api-key.json'))" 2>/dev/null; then
            echo "‚úÖ JSON file is valid"
          else
            echo "‚ùå JSON file is invalid"
          fi
          
          echo ""
          echo "JSON file contents (sanitized):"
          cat /tmp/asc-api-key.json | sed 's/"key": ".*"/"key": "[REDACTED]"/'
          
          echo ""
          echo "Environment variables set:"
          env | grep -E "(APP_STORE_CONNECT|ASC_)" | sed 's/=.*/=[REDACTED]/' || echo "No ASC env vars found"
