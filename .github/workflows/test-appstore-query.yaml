name: Direct App Store Connect API Key Test

on:
  workflow_dispatch:
    inputs:
      bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  test-direct-api-key:
    runs-on: ubuntu-latest
    steps:
      - name: Setup App Store Connect API Key (Direct)
        run: |
          echo "üîë Setting up App Store Connect API key directly..."
          
          # Create the P8 key file directly
          cat > /tmp/asc-api-key.p8 <<'EOF'
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY
          k6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz
          oeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj
          hrCw4w+O
          -----END PRIVATE KEY-----
          EOF
          
          # Set environment variables
          echo "ASC_API_KEY_ID=4QM5FBBF6P" >> $GITHUB_ENV
          echo "ASC_ISSUER_ID=63421d99-7718-41a8-99c8-01548625694f" >> $GITHUB_ENV
          echo "ASC_API_KEY_PATH=/tmp/asc-api-key.p8" >> $GITHUB_ENV
          echo "BUNDLE_ID=${{ inputs.bundle_id }}" >> $GITHUB_ENV
          
          echo "‚úÖ API key setup complete"

      - name: Verify OpenSSL Compatibility
        run: |
          echo "üîç OPENSSL COMPATIBILITY TEST"
          echo "=============================="
          
          echo "Environment info:"
          echo "Ruby: $(ruby --version)"
          echo "OpenSSL: $(openssl version)"
          
          echo ""
          echo "Testing P8 key with OpenSSL directly:"
          if openssl pkey -in /tmp/asc-api-key.p8 -noout -text; then
            echo "‚úÖ P8 key is valid and readable by OpenSSL"
          else
            echo "‚ùå P8 key has OpenSSL compatibility issues"
            echo "This confirms the 'invalid curve name' error"
          fi
          
          echo ""
          echo "Key details:"
          openssl pkey -in /tmp/asc-api-key.p8 -noout -text | head -10

      - name: Install Fastlane
        run: |
          echo "üì¶ Installing Fastlane..."
          
          # Install with sudo to fix permission issues
          sudo gem install fastlane --no-document
          
          echo "‚úÖ Fastlane installation complete"
          fastlane --version

      - name: Test Method 1 - app_store_build_number
        id: test1
        continue-on-error: true
        run: |
          echo "üß™ TESTING: app_store_build_number (Google recommended)"
          echo "================================================="
          
          if RESULT=$(fastlane run app_store_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"$ASC_API_KEY_PATH" \
              key_id:"$ASC_API_KEY_ID" \
              issuer_id:"$ASC_ISSUER_ID" 2>&1); then
          
            echo "‚úÖ app_store_build_number SUCCEEDED:"
            echo "$RESULT"
            
            # Parse result
            PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |App Store build number: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
            echo ""
            echo "üîç Parsing analysis:"
            echo "Raw result lines with numbers:"
            echo "$RESULT" | grep -E "[0-9]+"
            echo ""
            echo "Extracted build number: '$PARSED_BUILD'"
            
            if [[ "$PARSED_BUILD" =~ ^[0-9]+$ ]] && [ "$PARSED_BUILD" -gt 0 ]; then
              echo "üéØ SUCCESS: Valid build number found: $PARSED_BUILD"
              echo "SOLUTION: Use app_store_build_number in main workflow"
              echo "method1_success=true" >> $GITHUB_OUTPUT
              echo "method1_build=$PARSED_BUILD" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Parsing issue: '$PARSED_BUILD' is not a valid positive number"
              echo "method1_success=false" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "‚ùå app_store_build_number FAILED:"
            echo "$RESULT"
            
            if echo "$RESULT" | grep -q "invalid curve name"; then
              echo "üîç CONFIRMED: OpenSSL curve name error in method 1"
            fi
            echo "method1_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Test Method 2 - latest_testflight_build_number
        id: test2
        continue-on-error: true
        run: |
          echo ""
          echo "üß™ TESTING: latest_testflight_build_number (fallback)"
          echo "=============================================="
          
          if RESULT=$(fastlane run latest_testflight_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"$ASC_API_KEY_PATH" \
              key_id:"$ASC_API_KEY_ID" \
              issuer_id:"$ASC_ISSUER_ID" 2>&1); then
          
            echo "‚úÖ latest_testflight_build_number SUCCEEDED:"
            echo "$RESULT"
            
            # Parse result with multiple patterns
            PARSED_BUILD=$(echo "$RESULT" | grep -oE "(Result: |build: )?[0-9]+" | grep -oE "[0-9]+" | tail -1)
            echo ""
            echo "üîç Parsing analysis:"
            echo "Raw result lines with numbers:"
            echo "$RESULT" | grep -E "[0-9]+"
            echo ""
            echo "Extracted build number: '$PARSED_BUILD'"
            
            if [[ "$PARSED_BUILD" =~ ^[0-9]+$ ]] && [ "$PARSED_BUILD" -gt 0 ]; then
              echo "üéØ SUCCESS: Valid build number found: $PARSED_BUILD"
              echo "SOLUTION: Use latest_testflight_build_number in main workflow"
              echo "method2_success=true" >> $GITHUB_OUTPUT
              echo "method2_build=$PARSED_BUILD" >> $GITHUB_OUTPUT
            else
              echo "‚ö†Ô∏è Parsing issue: '$PARSED_BUILD' is not a valid positive number"
              echo "method2_success=false" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "‚ùå latest_testflight_build_number FAILED:"
            echo "$RESULT"
            
            if echo "$RESULT" | grep -q "invalid curve name"; then
              echo "üîç CONFIRMED: OpenSSL curve name error in method 2"
            fi
            echo "method2_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Test Alternative Fastlane JSON Key Format
        if: steps.test1.outputs.method1_success != 'true' && steps.test2.outputs.method2_success != 'true'
        run: |
          echo ""
          echo "üß™ TESTING: Alternative JSON API Key Format"
          echo "=========================================="
          
          # Create Fastlane-style JSON key file
          cat > /tmp/api_key.json <<'EOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          EOF
          
          echo "Created JSON API key file"
          echo "Testing with app_store_connect_api_key action..."
          
          if RESULT=$(fastlane run app_store_connect_api_key api_key_path:"/tmp/api_key.json" 2>&1); then
            echo "‚úÖ JSON API key format works"
            echo "$RESULT"
          else
            echo "‚ùå JSON API key format also fails"
            echo "$RESULT"
          fi

      - name: Final Analysis and Solution
        if: always()
        run: |
          echo ""
          echo "üéØ FINAL ANALYSIS & LP-21 SOLUTION"
          echo "=================================="
          
          METHOD1_SUCCESS="${{ steps.test1.outputs.method1_success }}"
          METHOD2_SUCCESS="${{ steps.test2.outputs.method2_success }}"
          METHOD1_BUILD="${{ steps.test1.outputs.method1_build }}"
          METHOD2_BUILD="${{ steps.test2.outputs.method2_build }}"
          
          echo "Test Results:"
          echo "  Method 1 (app_store_build_number): $METHOD1_SUCCESS (build: $METHOD1_BUILD)"
          echo "  Method 2 (latest_testflight_build_number): $METHOD2_SUCCESS (build: $METHOD2_BUILD)"
          
          if [ "$METHOD1_SUCCESS" = "true" ]; then
            echo ""
            echo "üéØ SOLUTION FOR LP-21:"
            echo "====================="
            echo "‚úÖ Use app_store_build_number method in main workflow"
            echo "‚úÖ Build number found: $METHOD1_BUILD"
            echo "‚úÖ OpenSSL compatibility confirmed for this method"
            echo ""
            echo "IMPLEMENTATION:"
            echo "Replace latest_testflight_build_number with app_store_build_number in app-store-query job"
            
          elif [ "$METHOD2_SUCCESS" = "true" ]; then
            echo ""
            echo "üéØ SOLUTION FOR LP-21:"
            echo "====================="
            echo "‚úÖ Keep latest_testflight_build_number method"
            echo "‚úÖ Build number found: $METHOD2_BUILD"
            echo "‚úÖ Parsing regex may need adjustment in main workflow"
            echo ""
            echo "IMPLEMENTATION:"
            echo "Current method works, but improve parsing logic"
            
          else
            echo ""
            echo "‚ùå BOTH METHODS FAILED - DEEPER ISSUE CONFIRMED"
            echo "=============================================="
            echo "Root cause: OpenSSL compatibility issue in GitHub Actions"
            echo ""
            echo "ALTERNATIVE SOLUTIONS:"
            echo "1. Update Fastlane version in workflow"
            echo "2. Use xcrun altool (deprecated but may work)"
            echo "3. Use manual version management temporarily"
            echo "4. Try different runner (macos instead of ubuntu)"
          fi
          
          echo ""
          echo "üîó Update LP-21 ticket with these results"
          echo "üîó Implement the working solution in main workflow"
