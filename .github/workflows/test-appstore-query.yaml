name: Test App Store Connect Query (Working Pattern)

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: macos-15
    steps:
      - name: Setup App Store Connect API Key (Working Method)
        run: |
          echo "üîë Setting up App Store Connect credentials using working pattern..."
          
          # Create ios directory structure (like your working workflow)
          mkdir -p ios/fastlane
          
          # Create the API key JSON in fastlane directory (working approach)
          cat > ios/fastlane/api_key.json << 'EOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          EOF
          
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          echo "‚úÖ API key setup complete in proper directory structure"

      - name: Install Fastlane
        run: |
          echo "üì¶ Installing Fastlane..."
          gem install fastlane --no-document
          echo "‚úÖ Fastlane installed"
          fastlane --version

      - name: Test App Store Connect Query (Working Directory Structure)
        working-directory: ios
        run: |
          echo "üîç Testing App Store Connect query with proper structure..."
          echo "üìã Bundle ID: $BUNDLE_ID"
          echo "üìÅ Working directory: $(pwd)"
          echo "üìÅ Fastlane directory exists: $(ls -la fastlane/)"
          
          # Create Fastfile in ios/fastlane directory (proper structure)
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Query App Store Connect for build number"
            lane :query_build_number do
              puts "=== App Store Connect Build Number Query ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
              
              begin
                # Method 1: Using your working pattern with api_key.json
                build_num = latest_testflight_build_number(
                  api_key_path: "fastlane/api_key.json",
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "LATEST_TESTFLIGHT_SUCCESS:#{build_num}"
              rescue => e
                puts "LATEST_TESTFLIGHT_ERROR:#{e.message}"
                puts "Error details: #{e.backtrace.first(3).join(', ')}"
              end
              
              begin
                # Method 2: Alternative approach with explicit API key creation
                api_key = app_store_connect_api_key(
                  key_id: "4QM5FBBF6P",
                  issuer_id: "63421d99-7718-41a8-99c8-01548625694f",
                  key_filepath: "fastlane/api_key.json"
                )
                
                build_num = latest_testflight_build_number(
                  api_key: api_key,
                  app_identifier: ENV["BUNDLE_ID"]
                )
                puts "EXPLICIT_API_KEY_SUCCESS:#{build_num}"
              rescue => e
                puts "EXPLICIT_API_KEY_ERROR:#{e.message}"
              end
              
              puts "=== Query Complete ==="
            end
          end
          EOF
          
          echo "üöÄ Running Fastlane with proper structure..."
          
          if OUTPUT=$(fastlane query_build_number 2>&1); then
            echo "‚úÖ Fastlane completed"
          else
            echo "‚ö†Ô∏è Fastlane had issues but continuing..."
          fi
          
          echo ""
          echo "üìã FASTLANE OUTPUT:"
          echo "=================="
          echo "$OUTPUT"
          echo "=================="
          echo ""
          
          # Parse results
          SUCCESS_COUNT=0
          WORKING_METHODS=()
          
          if echo "$OUTPUT" | grep -q "LATEST_TESTFLIGHT_SUCCESS:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "LATEST_TESTFLIGHT_SUCCESS:" | sed 's/.*LATEST_TESTFLIGHT_SUCCESS://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
              echo "üéØ LATEST_TESTFLIGHT SUCCESS: Build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              WORKING_METHODS+=("latest_testflight_build_number")
            fi
          elif echo "$OUTPUT" | grep -q "LATEST_TESTFLIGHT_ERROR:"; then
            ERROR_MSG=$(echo "$OUTPUT" | grep "LATEST_TESTFLIGHT_ERROR:" | sed 's/.*LATEST_TESTFLIGHT_ERROR://')
            echo "‚ùå LATEST_TESTFLIGHT ERROR: $ERROR_MSG"
          fi
          
          if echo "$OUTPUT" | grep -q "EXPLICIT_API_KEY_SUCCESS:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "EXPLICIT_API_KEY_SUCCESS:" | sed 's/.*EXPLICIT_API_KEY_SUCCESS://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]] && [ "$BUILD_NUM" -gt 0 ]; then
              echo "üéØ EXPLICIT_API_KEY SUCCESS: Build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              WORKING_METHODS+=("explicit_api_key")
            fi
          elif echo "$OUTPUT" | grep -q "EXPLICIT_API_KEY_ERROR:"; then
            ERROR_MSG=$(echo "$OUTPUT" | grep "EXPLICIT_API_KEY_ERROR:" | sed 's/.*EXPLICIT_API_KEY_ERROR://')
            echo "‚ùå EXPLICIT_API_KEY ERROR: $ERROR_MSG"
          fi
          
          echo ""
          echo "üéØ FINAL RESULTS"
          echo "==============="
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "‚úÖ LP-21 RESOLVED: $SUCCESS_COUNT method(s) working!"
            echo "‚úÖ Working methods: ${WORKING_METHODS[*]}"
            echo "‚úÖ Directory structure and API approach confirmed working"
            echo ""
            echo "üîß IMPLEMENTATION FOR MAIN WORKFLOW:"
            echo "1. Use 'latest_testflight_build_number' action"
            echo "2. Create api_key.json in ios/fastlane/ directory"
            echo "3. Run from ios/ working directory"
            echo "4. Use proper Fastfile structure in ios/fastlane/"
          else
            echo "‚ùå LP-21 PERSISTENT ISSUE: All methods failed"
            echo "‚ùå Check API key permissions or App Store Connect access"
          fi

      - name: Validate Working Structure
        working-directory: ios
        if: always()
        run: |
          echo ""
          echo "üîç DIRECTORY STRUCTURE VALIDATION"
          echo "================================="
          
          echo "Current working directory: $(pwd)"
          echo ""
          echo "fastlane/ directory contents:"
          ls -la fastlane/ || echo "No fastlane directory"
          echo ""
          echo "API key file validation:"
          if [ -f "fastlane/api_key.json" ]; then
            echo "‚úÖ api_key.json exists"
            if python3 -c "import json; json.load(open('fastlane/api_key.json'))" 2>/dev/null; then
              echo "‚úÖ api_key.json is valid JSON"
            else
              echo "‚ùå api_key.json is invalid JSON"
            fi
          else
            echo "‚ùå api_key.json not found"
          fi
          echo ""
          echo "Fastfile validation:"
          if [ -f "fastlane/Fastfile" ]; then
            echo "‚úÖ Fastfile exists"
            echo "First few lines:"
            head -5 fastlane/Fastfile
          else
            echo "‚ùå Fastfile not found"
          fi
