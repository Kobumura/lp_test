name: Debug App Store Connect - Detailed Investigation

on:
  workflow_dispatch:

jobs:
  debug-appstore:
    runs-on: ubuntu-latest
    steps:
      - name: Debug App Store Connect API
        env:
          BUNDLE_ID: "com.littletalks.app"
          API_KEY_ID: "${{ secrets.ASC_API_KEY_ID }}"
          ISSUER_ID: "${{ secrets.ASC_ISSUER_ID }}"
          API_KEY_P8: "${{ secrets.ASC_API_KEY_P8 }}"
        run: |
          echo "üîç DETAILED App Store Connect Investigation"
          echo "=========================================="
          
          # Install Fastlane
          sudo gem install fastlane
          echo ""
          
          # Create API key file
          mkdir -p ./fastlane
          jq -n \
            --arg key_id "$API_KEY_ID" \
            --arg issuer_id "$ISSUER_ID" \
            --arg key "$API_KEY_P8" \
            '{
              "key_id": $key_id,
              "issuer_id": $issuer_id,
              "key": $key,
              "duration": 1200,
              "in_house": false
            }' > ./fastlane/api_key.json
          
          export FASTLANE_OPT_OUT_USAGE=YES
          
          echo "üß™ TEST 1: Verify API Key Works"
          echo "-------------------------------"
          if fastlane run app_store_connect_api_key \
              key_id:"$API_KEY_ID" \
              issuer_id:"$ISSUER_ID" \
              key_content:"$API_KEY_P8" > /tmp/api_test.txt 2>&1; then
            echo "‚úÖ API key validation succeeded"
            cat /tmp/api_test.txt
          else
            echo "‚ùå API key validation failed:"
            cat /tmp/api_test.txt
          fi
          echo ""
          
          echo "üß™ TEST 2: List All Apps (to verify permissions)"
          echo "------------------------------------------------"
          if fastlane run spaceship \
              username:"$API_KEY_ID" \
              api_key_path:"./fastlane/api_key.json" > /tmp/apps.txt 2>&1; then
            echo "‚úÖ Apps listing succeeded:"
            cat /tmp/apps.txt
          else
            echo "‚ùå Apps listing failed:"
            head -20 /tmp/apps.txt
          fi
          echo ""
          
          echo "üß™ TEST 3: TestFlight Build Number (RAW OUTPUT)"
          echo "----------------------------------------------"
          fastlane run latest_testflight_build_number \
              app_identifier:"$BUNDLE_ID" \
              api_key_path:"./fastlane/api_key.json" 2>&1 | tee /tmp/testflight_raw.txt
          
          echo ""
          echo "üîç Raw TestFlight output analysis:"
          echo "  Total lines: $(wc -l < /tmp/testflight_raw.txt)"
          echo "  Lines with 'build': $(grep -i build /tmp/testflight_raw.txt | wc -l)"
          echo "  Lines with 'result': $(grep -i result /tmp/testflight_raw.txt | wc -l)"
          echo "  Lines with numbers: $(grep -o '[0-9]\+' /tmp/testflight_raw.txt | wc -l)"
          
          echo ""
          echo "üîç All lines containing numbers:"
          grep '[0-9]' /tmp/testflight_raw.txt || echo "No lines with numbers found"
          
          echo ""
          
          echo "üß™ TEST 4: Alternative Build Number Query"
          echo "----------------------------------------"
          # Try a different approach - get app info
          if fastlane run get_app_identifier > /tmp/app_info.txt 2>&1; then
            echo "‚úÖ App info query succeeded:"
            cat /tmp/app_info.txt
          else
            echo "‚ùå App info query failed:"
            cat /tmp/app_info.txt
          fi
          echo ""
          
          echo "üß™ TEST 5: Manual Version Check (if we had xcode project)"
          echo "--------------------------------------------------------"
          echo "Note: This would require the actual Xcode project, but let's see what happens..."
          if fastlane run get_version_number > /tmp/version.txt 2>&1; then
            echo "‚úÖ Version number query succeeded:"
            cat /tmp/version.txt
          else
            echo "‚ùå Version number query failed (expected without project):"
            head -10 /tmp/version.txt
          fi
          echo ""
          
          echo "üß™ TEST 6: Try Specific Version Query"
          echo "------------------------------------"
          # Try to get build number for a specific version
          if fastlane run latest_testflight_build_number \
              app_identifier:"$BUNDLE_ID" \
              version:"1.5.15" \
              api_key_path:"./fastlane/api_key.json" > /tmp/version_specific.txt 2>&1; then
            echo "‚úÖ Version-specific query succeeded:"
            cat /tmp/version_specific.txt
          else
            echo "‚ùå Version-specific query failed:"
            cat /tmp/version_specific.txt
          fi
          echo ""
          
          echo "üìã ANALYSIS & DEBUGGING"
          echo "======================"
          
          # Check if any queries found numbers
          ALL_NUMBERS=$(cat /tmp/*.txt | grep -o '[0-9]\+' | sort -n | uniq)
          if [ -n "$ALL_NUMBERS" ]; then
            echo "üî¢ All numbers found in outputs:"
            echo "$ALL_NUMBERS"
            
            HIGHEST=$(echo "$ALL_NUMBERS" | tail -1)
            echo "üéØ Highest number found: $HIGHEST"
          else
            echo "‚ùå No numbers found in any output"
          fi
          
          echo ""
          echo "üîç POSSIBLE ISSUES:"
          echo "1. API Key Permissions - Does it have TestFlight access?"
          echo "2. Bundle ID Mismatch - Is 'com.littletalks.app' exact?"
          echo "3. App Not in TestFlight - Only in App Store?"
          echo "4. Different App Store Connect Team"
          echo "5. API Version Compatibility"
          
          echo ""
          echo "üí° NEXT STEPS:"
          echo "1. Check App Store Connect web interface manually"
          echo "2. Verify API key has 'Developer' or 'Admin' role"
          echo "3. Confirm exact bundle identifier spelling"
          echo "4. Try querying a different app (if you have one) to test API"
          
          echo ""
          echo "üßπ Cleanup..."
          rm -rf ./fastlane /tmp/*.txt
          echo "‚úÖ Debug complete!"
