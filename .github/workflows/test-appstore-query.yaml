name: Test App Store Connect Query (Fixed JSON)

on:
  workflow_dispatch:
    inputs:
      ios_bundle_id:
        description: 'iOS Bundle ID to test'
        required: true
        default: 'com.littletalks.app'

jobs:
  app-store-query-test:
    runs-on: macos-15
    steps:
      - name: Setup App Store Connect API Key (Fixed JSON Method)
        run: |
          echo "🔑 Setting up App Store Connect credentials with proper JSON..."
          
          # Create ios directory structure
          mkdir -p ios/fastlane
          
          # Method 1: Create API key with properly escaped JSON
          # This uses a here-doc with proper JSON formatting
          cat > ios/fastlane/api_key.json << 'APIKEYEOF'
          {
            "key_id": "4QM5FBBF6P",
            "issuer_id": "63421d99-7718-41a8-99c8-01548625694f",
            "key": "-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY\nk6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz\noeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj\nhrCw4w+O\n-----END PRIVATE KEY-----",
            "duration": 1200,
            "in_house": false
          }
          APIKEYEOF
          
          # Method 2: Alternative - create .p8 file separately
          cat > ios/fastlane/AuthKey_4QM5FBBF6P.p8 << 'P8EOF'
          -----BEGIN PRIVATE KEY-----
          MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQghnrjw2IY0M/VODiY
          k6Ex1H0W9jh2ws/5GXpwXTcF6xKgCgYIKoZIzj0DAQehRANCAARF2go6/YIvc5qz
          oeEsjfmxRtEWSdA7QQQKOYjSkD5SqwAWHuTSJfS+5mw/J4UcUNvRe4MwBRZ4FtBj
          hrCw4w+O
          -----END PRIVATE KEY-----
          P8EOF
          
          # Validate the JSON file
          echo "🔍 Validating JSON file..."
          if python3 -m json.tool ios/fastlane/api_key.json > /dev/null 2>&1; then
            echo "✅ api_key.json is valid JSON!"
            echo "📋 JSON content:"
            python3 -m json.tool ios/fastlane/api_key.json | head -20
          else
            echo "❌ JSON validation failed!"
            echo "📋 Raw content:"
            cat ios/fastlane/api_key.json
            exit 1
          fi
          
          echo "BUNDLE_ID=${{ inputs.ios_bundle_id }}" >> $GITHUB_ENV
          echo "✅ API key setup complete"

      - name: Install Fastlane
        run: |
          echo "📦 Installing Fastlane..."
          gem install fastlane --no-document
          echo "✅ Fastlane installed"
          fastlane --version

      - name: Test App Store Connect Query (Multiple Methods)
        working-directory: ios
        run: |
          echo "🔍 Testing App Store Connect query..."
          echo "📋 Bundle ID: $BUNDLE_ID"
          echo "📁 Working directory: $(pwd)"
          echo "📁 Fastlane directory contents:"
          ls -la fastlane/
          
          # Create Fastfile with multiple test methods
          cat > fastlane/Fastfile << 'FASTFILEOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Query App Store Connect for build number"
            lane :query_build_number do
              puts "=== App Store Connect Build Number Query ==="
              puts "Bundle ID: #{ENV['BUNDLE_ID']}"
              puts "Working directory: #{Dir.pwd}"
          
              # Method 1: Using api_key.json file
              begin
                puts "\n--- Method 1: Using api_key.json file ---"
                build_num = latest_testflight_build_number(
                  api_key_path: "fastlane/api_key.json",
                  app_identifier: ENV["BUNDLE_ID"],
                  initial_build_number: 0
                )
                puts "✅ METHOD1_SUCCESS:#{build_num}"
              rescue => e
                puts "❌ METHOD1_ERROR:#{e.message}"
                puts "Backtrace: #{e.backtrace.first(3).join("\n")}"
              end
          
              # Method 2: Using .p8 file
              begin
                puts "\n--- Method 2: Using .p8 file ---"
                api_key = app_store_connect_api_key(
                  key_id: "4QM5FBBF6P",
                  issuer_id: "63421d99-7718-41a8-99c8-01548625694f",
                  key_filepath: "fastlane/AuthKey_4QM5FBBF6P.p8"
                )
          
                build_num = latest_testflight_build_number(
                  api_key: api_key,
                  app_identifier: ENV["BUNDLE_ID"],
                  initial_build_number: 0
                )
                puts "✅ METHOD2_SUCCESS:#{build_num}"
              rescue => e
                puts "❌ METHOD2_ERROR:#{e.message}"
              end
          
              # Method 3: Direct API key hash
              begin
                puts "\n--- Method 3: Direct API key hash ---"
                key_content = File.read("fastlane/AuthKey_4QM5FBBF6P.p8")
          
                build_num = latest_testflight_build_number(
                  api_key: {
                    key_id: "4QM5FBBF6P",
                    issuer_id: "63421d99-7718-41a8-99c8-01548625694f",
                    key: key_content,
                    duration: 1200,
                    in_house: false
                  },
                  app_identifier: ENV["BUNDLE_ID"],
                  initial_build_number: 0
                )
                puts "✅ METHOD3_SUCCESS:#{build_num}"
              rescue => e
                puts "❌ METHOD3_ERROR:#{e.message}"
              end
          
              puts "\n=== Query Complete ==="
            end
          end
          FASTFILEOF
          
          echo "🚀 Running Fastlane tests..."
          
          # Run with more verbose output
          export FASTLANE_OPT_OUT_USAGE="YES"
          export FASTLANE_HIDE_CHANGELOG="true"
          
          if OUTPUT=$(fastlane query_build_number 2>&1); then
            echo "✅ Fastlane completed"
          else
            echo "⚠️ Fastlane had issues but continuing..."
          fi
          
          echo ""
          echo "📋 FULL FASTLANE OUTPUT:"
          echo "======================="
          echo "$OUTPUT"
          echo "======================="
          echo ""
          
          # Parse results
          SUCCESS_COUNT=0
          WORKING_METHODS=()
          
          # Check Method 1
          if echo "$OUTPUT" | grep -q "METHOD1_SUCCESS:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "METHOD1_SUCCESS:" | sed 's/.*METHOD1_SUCCESS://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]]; then
              echo "✅ Method 1 (api_key.json): Build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              WORKING_METHODS+=("api_key.json")
            fi
          fi
          
          # Check Method 2
          if echo "$OUTPUT" | grep -q "METHOD2_SUCCESS:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "METHOD2_SUCCESS:" | sed 's/.*METHOD2_SUCCESS://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]]; then
              echo "✅ Method 2 (.p8 file): Build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              WORKING_METHODS+=(".p8_file")
            fi
          fi
          
          # Check Method 3
          if echo "$OUTPUT" | grep -q "METHOD3_SUCCESS:"; then
            BUILD_NUM=$(echo "$OUTPUT" | grep "METHOD3_SUCCESS:" | sed 's/.*METHOD3_SUCCESS://' | tr -d ' ')
            if [[ "$BUILD_NUM" =~ ^[0-9]+$ ]]; then
              echo "✅ Method 3 (direct hash): Build $BUILD_NUM"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              WORKING_METHODS+=("direct_hash")
            fi
          fi
          
          echo ""
          echo "🎯 FINAL RESULTS"
          echo "==============="
          if [ "$SUCCESS_COUNT" -gt 0 ]; then
            echo "✅ SUCCESS: $SUCCESS_COUNT method(s) working!"
            echo "✅ Working methods: ${WORKING_METHODS[*]}"
            echo ""
            echo "🔧 RECOMMENDED IMPLEMENTATION:"
            if [[ " ${WORKING_METHODS[@]} " =~ " api_key.json " ]]; then
              echo "Use Method 1: api_key.json with proper JSON escaping"
            elif [[ " ${WORKING_METHODS[@]} " =~ " .p8_file " ]]; then
              echo "Use Method 2: Separate .p8 file"
            else
              echo "Use Method 3: Direct API key hash"
            fi
          else
            echo "❌ ALL METHODS FAILED"
            echo "🔍 Check:"
            echo "   - API key permissions in App Store Connect"
            echo "   - Bundle ID exists in App Store Connect"
            echo "   - TestFlight access is enabled for the API key"
          fi

      - name: Final Validation
        working-directory: ios
        if: always()
        run: |
          echo ""
          echo "🔍 FINAL VALIDATION"
          echo "=================="
          
          echo "📁 Directory structure:"
          find . -name "*.json" -o -name "*.p8" -o -name "Fastfile" | sort
          
          echo ""
          echo "📋 api_key.json validation:"
          if [ -f "fastlane/api_key.json" ]; then
            if python3 -c "import json; data = json.load(open('fastlane/api_key.json')); print('✅ Valid JSON with', len(data), 'keys')" 2>/dev/null; then
              echo "✅ JSON structure is valid"
              # Check if key field has proper newlines
              if python3 -c "import json; data = json.load(open('fastlane/api_key.json')); print('✅ Key has newlines' if '\\n' in data.get('key', '') else '❌ Key missing newlines')" 2>/dev/null; then
                echo "✅ Key field properly formatted"
              fi
            else
              echo "❌ JSON is invalid"
            fi
          fi
          
          echo ""
          echo "📋 .p8 file validation:"
          if [ -f "fastlane/AuthKey_4QM5FBBF6P.p8" ]; then
            echo "✅ .p8 file exists"
            echo "First line: $(head -1 fastlane/AuthKey_4QM5FBBF6P.p8)"
            echo "Last line: $(tail -1 fastlane/AuthKey_4QM5FBBF6P.p8)"
          fi